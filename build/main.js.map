{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\nimport { getEpmDetails, getInverterDetails, getInverterList, getStationDetails } from \"./lib/apiHelper\";\nimport { createObjects } from \"./lib/createObjects\";\n\nclass soliscloud extends utils.Adapter {\n\tprivate intervalId: any;\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"soliscloud\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\tprivate async onReady(): Promise<void> {\n\t\tthis.log.info(\"Starting soliscloud adapter\");\n\n\t\tif (this.config.plantId != null) {\n\t\t\tthis.config.plantId = this.name2id(this.config.plantId);\n\t\t\tcreateObjects(this);\n\t\t} else {\n\t\t\tthis.log.error(\"No plantID was entered or it contains invalid characters.\");\n\t\t}\n\n\t\tif (this.configOK()) {\n\t\t\tthis.log.info(\n\t\t\t\t`Start polling soliscloud, polling every ${this.config.pollInterval} seconds`,\n\t\t\t);\n\t\t\tthis.intervalId = this.setInterval(async () => {\n\t\t\t\tawait this.pollSolis();\n\t\t\t}, this.config.pollInterval * 1000);\n\t\t} else {\n\t\t\tthis.log.error(\"Config seems to be invalid, NOT polling.\");\n\t\t}\n\t}\n\n\tprivate name2id(pName: string): string {\n\t\treturn (pName || \"\").replace(this.FORBIDDEN_CHARS, \"_\");\n\t}\n\n\tprivate configOK(): boolean {\n\t\tif (\n\t\t\tthis.config.apiKey &&\n\t\t\tthis.config.plantId &&\n\t\t\ttypeof this.config.pollInterval === \"number\" &&\n\t\t\tthis.config.pollInterval >= 45 &&\n\t\t\tthis.config.pollInterval <= 1800\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async pollSolis(): Promise<void> {\n\t\ttry {\n\t\t\tconst callResult = await getStationDetails(\n\t\t\t\tthis\n\t\t\t);\n\n\t\t\tif (callResult) {\n\t\t\t\tif (this.config.debugLogging) {\n\t\t\t\t\tthis.log.debug(\"Received result from API call, current consumption should be: \" + callResult.current_consumption);\n\t\t\t\t}\n\t\t\t\tlet plantStatus = \"\";\n\t\t\t\tswitch (callResult.plant_state) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tplantStatus = \"Online\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tplantStatus = \"Offline\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tplantStatus = \"Alarm\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.log.error(`Received an incorrect plant status from the API Call, this should NOT happen.`);\n\t\t\t\t\t\tthis.logErrorWithSentry(this, callResult.plant_state, \"incorrectPlantState\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this.config.debugLogging) {\n\t\t\t\t\tthis.log.debug(`Plant ${this.config.plantId} is ${plantStatus}`);\n\t\t\t\t}\n\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t`${this.config.plantId}.station_detail.plant_state`,\n\t\t\t\t\t{ val: plantStatus, ack: true }\n\t\t\t\t);\n\n\t\t\t\tconst properties = [\n\t\t\t\t\t\"current_consumption\",\n\t\t\t\t\t\"current_power\",\n\t\t\t\t\t\"current_from_net\",\n\t\t\t\t\t\"sold_today\",\n\t\t\t\t\t\"generated_today\",\n\t\t\t\t\t\"bought_today\",\n\t\t\t\t\t\"consumption_today\",\n\t\t\t\t\t\"battery_percent\",\n\t\t\t\t\t\"battery_current_usage\",\n\t\t\t\t\t\"total_consumption_energy\",\n\t\t\t\t\t\"self_consumption_energy\",\n\t\t\t\t\t\"battery_month_charge_energy\",\n\t\t\t\t\t\"battery_month_charge_energy_units\",\n\t\t\t\t\t\"battery_year_charge_energy\",\n\t\t\t\t\t\"battery_year_charge_energy_units\",\n\t\t\t\t\t\"battery_month_discharge_energy\",\n\t\t\t\t\t\"battery_month_discharge_energy_units\",\n\t\t\t\t\t\"battery_year_discharge_energy\",\n\t\t\t\t\t\"battery_year_discharge_energy_units\",\n\t\t\t\t];\n\t\t\t\tfor (const property of properties) {\n\t\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t\t`${this.config.plantId}.station_detail.${property}`,\n\t\t\t\t\t\t{ val: callResult[property], ack: true }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logErrorWithSentry(this, callResult, \"stationCallResult\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.logErrorWithSentry(this, e, \"getStationDetails\");\n\t\t}\n\t\ttry {\n\t\t\tconst inverterDetailResult = await getInverterList(\n\t\t\t\tthis\n\t\t\t);\n\t\t\tif (inverterDetailResult) {\n\t\t\t\tif (this.config.debugLogging) {\n\t\t\t\t\tthis.log.debug(`Correct result from Inverter API call, inverter state: ${inverterDetailResult.inverter_state}`);\n\t\t\t\t}\n\t\t\t\tlet inverterStatus = \"\";\n\n\t\t\t\tswitch (inverterDetailResult.inverter_state) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tinverterStatus = \"Online\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tinverterStatus = \"Offline\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tinverterStatus = \"Alarm\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.log.error(`Received an incorrect plant status from the inverter API Call, this should NOT happen.`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this.config.debugLogging) {\n\t\t\t\t\tthis.log.debug(`set inverter state to: ${inverterStatus}`);\n\t\t\t\t}\n\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t`${this.config.plantId}.inverter_detail.energy_day`,\n\t\t\t\t\t{ val: inverterDetailResult.etoday, ack: true },\n\t\t\t\t);\n\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t`${this.config.plantId}.inverter_detail.state`,\n\t\t\t\t\t{ val: inverterStatus, ack: true },\n\t\t\t\t);\n\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t`${this.config.plantId}.inverter_detail.id`,\n\t\t\t\t\t{ val: inverterDetailResult.inverter_id, ack: true },\n\t\t\t\t);\n\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t`${this.config.plantId}.inverter_detail.serial_number`,\n\t\t\t\t\t{ val: inverterDetailResult.inverter_serial_number, ack: true },\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.log.error(`error while calling API (Inverter): ${e}`);\n\t\t\tthis.logErrorWithSentry(this, e, \"getInverterList\");\n\t\t}\n\n\t\ttry {\n\t\t\tthis.getState(`${this.config.plantId}.inverter_detail.id`, async (err, state) => {\n\t\t\t\tif (!err && state && state.val) {\n\t\t\t\t\tconst inverterId = state.val.toString();\n\t\t\t\t\tif (this.config.debugLogging) {\n\t\t\t\t\t\tthis.log.debug(`The value of ${this.config.plantId}.inverter_detail.id is ${inverterId}`);\n\t\t\t\t\t}\n\t\t\t\t\tconst inverterDetails = await getInverterDetails(this, inverterId);\n\t\t\t\t\tif (inverterDetails) {\n\t\t\t\t\t\tconst propertiesToSet = [\n\t\t\t\t\t\t\t\"ac_current_R\",\n\t\t\t\t\t\t\t\"ac_current_S\",\n\t\t\t\t\t\t\t\"ac_current_T\",\n\t\t\t\t\t\t\t\"ac_voltage_R\",\n\t\t\t\t\t\t\t\"ac_voltage_S\",\n\t\t\t\t\t\t\t\"ac_voltage_T\",\n\t\t\t\t\t\t\t\"family_load_power_units\",\n\t\t\t\t\t\t\t\"family_load_power\",\n\t\t\t\t\t\t\t\"temperature\",\n\t\t\t\t\t\t\t\"battery_today_charge_energy\",\n\t\t\t\t\t\t\t\"battery_today_charge_energy_units\",\n\t\t\t\t\t\t\t\"battery_total_charge_energy\",\n\t\t\t\t\t\t\t\"battery_total_charge_energy_units\",\n\t\t\t\t\t\t\t\"battery_today_discharge_energy\",\n\t\t\t\t\t\t\t\"battery_today_discharge_energy_units\",\n\t\t\t\t\t\t\t\"battery_total_discharge_energy\",\n\t\t\t\t\t\t\t\"battery_total_discharge_energy_units\",\n\t\t\t\t\t\t];\n\n\t\t\t\t\t\tpropertiesToSet.forEach(async (property) => {\n\t\t\t\t\t\t\tconst stateKey = `${this.config.plantId}.inverter_detail.${property}`;\n\t\t\t\t\t\t\tawait this.setStateAsync(stateKey, { val: inverterDetails[property], ack: true });\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.log.error(`Error getting the state: ${err}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tthis.logErrorWithSentry(this, e, \"getStateInverterDetails\");\n\t\t}\n\n\t\tif (this.config.epm) {\n\t\t\tthis.log.info(\"EPM is enabled, making API call\");\n\t\t\tgetEpmDetails(this);\n\t\t}\n\t}\n\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tthis.log.info(\"Stopping soliscloud polling\");\n\t\t\tthis.clearInterval(this.intervalId);\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tthis.logErrorWithSentry(this, e, \"onUnload\");\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tprivate logErrorWithSentry(adapter: any, error: any, functionName: string): void {\n\t\tadapter.log.error(error);\n\t\tif (adapter.supportsFeature && adapter.supportsFeature(\"PLUGINS\")) {\n\t\t\tconst sentryInstance = adapter.getPluginInstance(\"sentry\");\n\t\t\tif (sentryInstance) {\n\t\t\t\tadapter.log.error(functionName);\n\t\t\t\tsentryInstance.getSentryObject().captureException(error, {\n\t\t\t\t\textra: {\n\t\t\t\t\t\t\"functionName\": functionName,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nif (require.main !== module) {\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\n\t\tnew soliscloud(options);\n} else {\n\t(() => new soliscloud())();\n}\n"],
  "mappings": "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",
  "names": []
}

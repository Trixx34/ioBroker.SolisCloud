{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\r\n\r\nimport axios from \"axios\";\r\nimport crypto from \"crypto\";\r\n\r\nconst API_BASE_URL = \"https://www.soliscloud.com:13333\";\r\nclass SolisCloud extends utils.Adapter {\r\n\tprivate running: boolean = false;\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: \"soliscloud\",\r\n\t\t});\r\n\t\tthis.on(\"ready\", this.onReady.bind(this));\r\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\r\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\r\n\t\t// this.on(\"message\", this.onMessage.bind(this));\r\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\tawait this.setObjectNotExistsAsync(\"current_Consumption\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"currentConsumption\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"current_Power\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"current_Power\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"current_From_Net\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"current_From_Net\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"sold_Today\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"sold_Today\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\t\tawait this.setObjectNotExistsAsync(\"generated_Today\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"generated_Today\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"bought_Today\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"bought_Today\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"consumption_Today\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"consumption_Today\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"battery_percent\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"battery_percent\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"battery_current_usage\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"battery_current_usage\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n/**\r\n\t\tthis.subscribeStates(\"*\");\r\n\t\tthis.subscribeStates(\"current_Consumption\");\r\n\t\tthis.subscribeStates(\"current_Power\");\r\n\t\tthis.subscribeStates(\"current_From_Net\");\r\n\t\tthis.subscribeStates(\"sold_Today\");\r\n\t\tthis.subscribeStates(\"generated_Today\");\r\n\t\tthis.subscribeStates(\"bought_Today\");\r\n\t\tthis.subscribeStates(\"consumption_Today\");\r\n\t\tthis.subscribeStates(\"battery_percent\");\r\n\t\tthis.subscribeStates(\"battery_current_usage\");\r\n**/\r\n\t\tif (this.config.apiKey && this.config.apiSecret && this.config.plantId) {\r\n\t\tthis.running = true;\r\n\t\twhile (this.running) {\r\n\r\n\t\t\t\tconst callResult = await this.getStationDetails(this.config.plantId, this.config.apiKey, this.config.apiSecret);\r\n\r\n\t\t\t\tawait this.setStateAsync(\"current_Consumption\", callResult?.current_consumption);\r\n\t\t\t\tawait this.setStateAsync(\"current_Power\", callResult?.current_Power);\r\n\t\t\t\tawait this.setStateAsync(\"current_From_Net\", callResult?.current_From_Net);\r\n\t\t\t\tawait this.setStateAsync(\"sold_Today\", callResult?.sold_Today);\r\n\t\t\t\tawait this.setStateAsync(\"generated_Today\", callResult?.generated_Today);\r\n\t\t\t\tawait this.setStateAsync(\"bought_Today\", callResult?.bought_Today);\r\n\t\t\t\tawait this.setStateAsync(\"consumption_Today\", callResult?.consumption_Today);\r\n\t\t\t\tawait this.setStateAsync(\"battery_percent\", callResult?.battery_percent);\r\n\t\t\t\tawait this.setStateAsync(\"battery_current_usage\", callResult?.battery_current_usage);\r\n\r\n\t\t\t\t//Wait 30 seconds and loop again. #TODO make interval configurable\r\n\t\t\t    await new Promise(resolve => setTimeout(resolve, 30000));\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\ttry {\r\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\r\n\t\t\t// clearTimeout(timeout1);\r\n\t\t\t// clearTimeout(timeout2);\r\n\t\t\t// ...\r\n\t\t\t// clearInterval(interval1);\r\n\t\t\tthis.running = false;\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n\t\tif (state) {\r\n\t\t\t// The state was changed\r\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async getStationDetails(stationId: string, apiKey: string, apiSecret: string) {\r\n\t\tconst map = {\r\n\t\t\tid: stationId,\r\n\t\t};\r\n\t\tconst body = JSON.stringify(map);\r\n\t\tconst ContentMd5 = this.getDigest(body);\r\n\t\tconst currentDate = this.getGMTTime();\r\n\t\tconst param =\r\n\t\t\t\"POST\" +\r\n\t\t\t\"\\n\" +\r\n\t\t\tContentMd5 +\r\n\t\t\t\"\\n\" +\r\n\t\t\t\"application/json\" +\r\n\t\t\t\"\\n\" +\r\n\t\t\tcurrentDate +\r\n\t\t\t\"\\n\" +\r\n\t\t\t\"/v1/api/stationDetail\";\r\n\t\tconst sign = this.HmacSHA1Encrypt(param, apiSecret);\r\n\t\tconst url = API_BASE_URL + \"/v1/api/stationDetail\";\r\n\t\ttry {\r\n\t\t\tconst requestBody = JSON.stringify(map);\r\n\t\t\tconst response = await axios({\r\n\t\t\t\tmethod: \"post\",\r\n\t\t\t\turl: url,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\t\tAuthorization: `API ${apiKey}:${sign}`,\r\n\t\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\t\tDate: currentDate,\r\n\t\t\t\t},\r\n\t\t\t\tdata: requestBody,\r\n\t\t\t});\r\n\t\t\t//console.log(response.data.data);\r\n\t\t\treturn {\r\n\t\t\t\tcurrent_Power: response.data.data.power,\r\n\t\t\t\tcurrent_consumption: response.data.data.familyLoadPower,\r\n\t\t\t\tcurrent_From_Net: response.data.data.psum,\r\n\t\t\t\tsold_Today: response.data.data.gridSellDayEnergy,\r\n\t\t\t\tgenerated_Today: response.data.data.dayEnergy,\r\n\t\t\t\tbought_Today: response.data.data.gridPurchasedDayEnergy,\r\n\t\t\t\tconsumption_Today: response.data.data.homeLoadEnergy,\r\n\t\t\t\tbattery_percent: response.data.data.batteryPercent,\r\n\t\t\t\tbattery_current_usage: response.data.data.batteryPower,\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate HmacSHA1Encrypt(encryptText: string, keySecret: string):string {\r\n\t\tconst keyBuffer = Buffer.from(keySecret, \"utf-8\");\r\n\t\tconst hmac = crypto.createHmac(\"sha1\", keyBuffer);\r\n\t\thmac.update(encryptText, \"utf-8\");\r\n\t\tconst resultBuffer = hmac.digest();\r\n\t\treturn resultBuffer.toString(\"base64\");\r\n\t}\r\n\r\n\tprivate getGMTTime():string {\r\n\t\tconst cd = new Date();\r\n\t\tconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\t\tconst months = [\r\n\t\t\t\"Jan\",\r\n\t\t\t\"Feb\",\r\n\t\t\t\"Mar\",\r\n\t\t\t\"Apr\",\r\n\t\t\t\"May\",\r\n\t\t\t\"Jun\",\r\n\t\t\t\"Jul\",\r\n\t\t\t\"Aug\",\r\n\t\t\t\"Sep\",\r\n\t\t\t\"Oct\",\r\n\t\t\t\"Nov\",\r\n\t\t\t\"Dec\",\r\n\t\t];\r\n\r\n\t\treturn `${days[cd.getUTCDay()]}, ${cd.getUTCDate()} ${months[cd.getUTCMonth()]} ${cd.getUTCFullYear()} ${cd.getUTCHours()}:${cd.getUTCMinutes()}:${cd.getUTCSeconds()} GMT`;\r\n\t}\r\n\r\n\tprivate getDigest(test:string):string {\r\n\t\tconst md5 = crypto.createHash(\"md5\");\r\n\t\tmd5.update(test);\r\n\t\treturn md5.digest(\"base64\");\r\n\t}\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SolisCloud(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new SolisCloud())();\r\n}"],
  "mappings": "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",
  "names": ["axios", "crypto"]
}

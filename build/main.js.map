{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\n\nimport axios from \"axios\";\nimport crypto from \"crypto\";\n\nconst API_BASE_URL = \"https://www.soliscloud.com:13333\";\nclass SolisCloud extends utils.Adapter {\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"soliscloud\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\t// this.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\n\t\tthis.log.info(\"config apiKey: \" + this.config.apiKey);\n\t\tthis.log.info(\"config apiSecret: \" + this.config.apiSecret);\n\t\tthis.log.info(\"config plantID: \" + this.config.plantId);\n\n\t\tconst callResult = await this.getStationDetails(this.config.plantId,this.config.apiKey,this.config.apiSecret);\n\t\tif (callResult) {\n\t\t\tthis.log.info(\"Should work, Consumption = \" + callResult.current_consumption);\n\t\t}\n\n\t\t/*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n\t\tawait this.setObjectNotExistsAsync(\"currentConsumption\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"currentConsumption\",\n\t\t\t\ttype: \"number\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\tthis.subscribeStates(\"currentConsumption\");\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates(\"lights.*\");\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates(\"*\");\n\n\t\t/*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n\t\t// the variable testVariable is set to true as command (ack=false)\n\t\tawait this.setStateAsync(\"currentConsumption\", callResult?.current_consumption);\n\t\tthis.log.info(\"Finished running\");\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\n\tprivate async getStationDetails(stationId: string, apiKey: string, apiSecret: string) {\n\t\tconst map = {\n\t\t\tid: stationId,\n\t\t};\n\t\tconst body = JSON.stringify(map);\n\t\tconst ContentMd5 = this.getDigest(body);\n\t\tconst currentDate = this.getGMTTime();\n\t\tconst param =\n\t\t\t\"POST\" +\n\t\t\t\"\\n\" +\n\t\t\tContentMd5 +\n\t\t\t\"\\n\" +\n\t\t\t\"application/json\" +\n\t\t\t\"\\n\" +\n\t\t\tcurrentDate +\n\t\t\t\"\\n\" +\n\t\t\t\"/v1/api/stationDetail\";\n\t\tconst sign = this.HmacSHA1Encrypt(param, apiSecret);\n\t\tconst url = API_BASE_URL + \"/v1/api/stationDetail\";\n\t\ttry {\n\t\t\tconst requestBody = JSON.stringify(map);\n\t\t\tconst response = await axios({\n\t\t\t\tmethod: \"post\",\n\t\t\t\turl: url,\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\n\t\t\t\t\tAuthorization: `API ${apiKey}:${sign}`,\n\t\t\t\t\t\"Content-MD5\": ContentMd5,\n\t\t\t\t\tDate: currentDate,\n\t\t\t\t},\n\t\t\t\tdata: requestBody,\n\t\t\t});\n\t\t\t//console.log(response.data.data);\n\t\t\treturn {\n\t\t\t\tcurrent_Power: response.data.data.power,\n\t\t\t\tcurrent_consumption: response.data.data.familyLoadPower,\n\t\t\t\tcurrent_From_Net: response.data.data.psum,\n\t\t\t\tsold_Today: response.data.data.gridSellDayEnergy,\n\t\t\t\tgenerated_Today: response.data.data.dayEnergy,\n\t\t\t\tbought_Today: response.data.data.gridPurchasedDayEnergy,\n\t\t\t\tconsumption_Today: response.data.data.homeLoadEnergy,\n\t\t\t\tbattery_percent: response.data.data.batteryPercent,\n\t\t\t\tbattery_current_usage: response.data.data.batteryPower,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\n\tprivate HmacSHA1Encrypt(encryptText: string, keySecret: string):string {\n\t\tconst keyBuffer = Buffer.from(keySecret, \"utf-8\");\n\t\tconst hmac = crypto.createHmac(\"sha1\", keyBuffer);\n\t\thmac.update(encryptText, \"utf-8\");\n\t\tconst resultBuffer = hmac.digest();\n\t\treturn resultBuffer.toString(\"base64\");\n\t}\n\n\tprivate getGMTTime():string {\n\t\tconst cd = new Date();\n\t\tconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\t\tconst months = [\n\t\t\t\"Jan\",\n\t\t\t\"Feb\",\n\t\t\t\"Mar\",\n\t\t\t\"Apr\",\n\t\t\t\"May\",\n\t\t\t\"Jun\",\n\t\t\t\"Jul\",\n\t\t\t\"Aug\",\n\t\t\t\"Sep\",\n\t\t\t\"Oct\",\n\t\t\t\"Nov\",\n\t\t\t\"Dec\",\n\t\t];\n\n\t\treturn `${days[cd.getUTCDay()]}, ${cd.getUTCDate()} ${months[cd.getUTCMonth()]} ${cd.getUTCFullYear()} ${cd.getUTCHours()}:${cd.getUTCMinutes()}:${cd.getUTCSeconds()} GMT`;\n\t}\n\n\tprivate getDigest(test:string):string {\n\t\tconst md5 = crypto.createHash(\"md5\");\n\t\tmd5.update(test);\n\t\treturn md5.digest(\"base64\");\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SolisCloud(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new SolisCloud())();\n}"],
  "mappings": "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",
  "names": ["axios", "crypto"]
}

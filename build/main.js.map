{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\r\nconst axios = require(\"axios\");\r\nconst crypto = require(\"crypto\");\r\nconst API_BASE_URL = \"https://www.soliscloud.com:13333\";\r\n\r\nclass Solis extends utils.Adapter {\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: \"solis\",\r\n\t\t});\r\n\t\tthis.on(\"ready\", this.onReady.bind(this));\r\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\r\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\r\n\t}\r\n\r\n\tprivate async onReady(): Promise<void> {\r\n\t\tconst apiKey = this.config.apiKey;\r\n\t\tconst apiSecret = this.config.apiSecret;\r\n\t\tconst stationId = this.config.stationId;\r\n\r\n\t\tconst callResult: SolisData | undefined = await this.getStationDetails(stationId, apiKey, apiSecret);\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"currentConsumption\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"currentConsumption\",\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tthis.subscribeStates(\"currentConsumption\");\r\n\t\tif (callResult) {\r\n\t\t\tawait this.setStateAsync(\"currentConsumption\", callResult.solis_current_consumption);\r\n\t\t\tthis.log.info(callResult?.solis_battery_current_usage.toString());\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\ttry {\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n\t\tif (state) {\r\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t} else {\r\n\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync getStationDetails(stationId: string, apiKey: string, apiSecret: string): Promise<SolisData | undefined> {\r\n\t\tconst map = {\r\n\t\t\tid: stationId,\r\n\t\t};\r\n\r\n\t\tconst body = JSON.stringify(map);\r\n\t\tconst ContentMd5 = this.getDigest(body);\r\n\t\tconst currentDate = this.getGMTTime();\r\n\t\tconst param =\r\n\t\t\t\"POST\" +\r\n\t\t\t\"\\n\" +\r\n\t\t\tContentMd5 +\r\n\t\t\t\"\\n\" +\r\n\t\t\t\"application/json\" +\r\n\t\t\t\"\\n\" +\r\n\t\t\tcurrentDate +\r\n\t\t\t\"\\n\" +\r\n\t\t\t\"/v1/api/stationDetail\";\r\n\t\tconst sign = this.HmacSHA1Encrypt(param, apiSecret);\r\n\t\tconst url = API_BASE_URL + \"/v1/api/stationDetail\";\r\n\t\ttry {\r\n\t\t\tconst requestBody = JSON.stringify(map);\r\n\t\t\tconst response = await axios({\r\n\t\t\t\tmethod: \"post\",\r\n\t\t\t\turl: url,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\t\tAuthorization: `API ${apiKey}:${sign}`,\r\n\t\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\t\tDate: currentDate,\r\n\t\t\t\t},\r\n\t\t\t\tdata: requestBody,\r\n\t\t\t});\r\n\r\n\t\t\tconst result = {\r\n\t\t\t\tsolis_current_Power: response.data.data.power,\r\n\t\t\t\tsolis_current_consumption: response.data.data.familyLoadPower,\r\n\t\t\t\tsolis_current_From_Net: response.data.data.psum,\r\n\t\t\t\tsolis_sold_Today: response.data.data.gridSellDayEnergy,\r\n\t\t\t\tsolis_generated_Today: response.data.data.dayEnergy,\r\n\t\t\t\tsolis_bought_Today: response.data.data.gridPurchasedDayEnergy,\r\n\t\t\t\tsolis_consumption_Today: response.data.data.homeLoadEnergy,\r\n\t\t\t\tsolis_battery_percent: response.data.data.batteryPercent,\r\n\t\t\t\tsolis_battery_current_usage: response.data.data.batteryPower,\r\n\t\t\t};\r\n\t\t\treturn result;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n\r\n\tHmacSHA1Encrypt(encryptText: string, keySecret: string) {\r\n\t\tconst keyBuffer = Buffer.from(keySecret, \"utf-8\");\r\n\t\tconst hmac = crypto.createHmac(\"sha1\", keyBuffer);\r\n\t\thmac.update(encryptText, \"utf-8\");\r\n\t\tconst resultBuffer = hmac.digest();\r\n\t\treturn resultBuffer.toString(\"base64\");\r\n\t}\r\n\r\n\tgetGMTTime() {\r\n\t\tconst cd = new Date();\r\n\t\tconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\t\tconst months = [\r\n\t\t\t\"Jan\",\r\n\t\t\t\"Feb\",\r\n\t\t\t\"Mar\",\r\n\t\t\t\"Apr\",\r\n\t\t\t\"May\",\r\n\t\t\t\"Jun\",\r\n\t\t\t\"Jul\",\r\n\t\t\t\"Aug\",\r\n\t\t\t\"Sep\",\r\n\t\t\t\"Oct\",\r\n\t\t\t\"Nov\",\r\n\t\t\t\"Dec\",\r\n\t\t];\r\n\r\n\t\tconst formattedDate = `${days[cd.getUTCDay()]}, ${cd.getUTCDate()} ${months[cd.getUTCMonth()]\r\n\t\t\t} ${cd.getUTCFullYear()} ${cd.getUTCHours()}:${cd.getUTCMinutes()}:${cd.getUTCSeconds()} GMT`;\r\n\r\n\t\treturn formattedDate;\r\n\t}\r\n\r\n\tgetDigest(test: string) {\r\n\t\tconst md5 = crypto.createHash(\"md5\");\r\n\t\tmd5.update(test);\r\n\t\treturn md5.digest(\"base64\");\r\n\t}\r\n\r\n}\r\n\r\nif (require.main !== module) {\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Solis(options);\r\n} else {\r\n\t(() => new Solis())();\r\n}\r\n\r\ntype SolisData = {\r\n\tsolis_current_Power: number;\r\n\tsolis_current_consumption: number;\r\n\tsolis_current_From_Net: number;\r\n\tsolis_sold_Today: number;\r\n\tsolis_generated_Today: number;\r\n\tsolis_bought_Today: number;\r\n\tsolis_consumption_Today: number;\r\n\tsolis_battery_percent: number;\r\n\tsolis_battery_current_usage: number;\r\n\t[key: string]: number; // Index signature allowing any string key\r\n};\r\n"],
  "mappings": "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",
  "names": []
}

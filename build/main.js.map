{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\r\nimport { getStationDetails } from \"./lib/apiHelper\";\r\nimport \"./lib/apiHelper\";\r\n\r\nclass soliscloud extends utils.Adapter {\r\n  private intervalId: any;\r\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n    super({\r\n      ...options,\r\n      name: \"soliscloud\",\r\n    });\r\n    this.on(\"ready\", this.onReady.bind(this));\r\n    this.on(\"unload\", this.onUnload.bind(this));\r\n  }\r\n\r\n  private async onReady(): Promise<void> {\r\n    this.log.info(\"Starting soliscloud adapter\");\r\n\r\n    if (this.config.plantId != null) {\r\n      await this.setObjectNotExistsAsync(\r\n        `${this.config.plantId}.current_consumption`,\r\n        {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"current_consumption\",\r\n            type: \"number\",\r\n            unit: \"kW\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: true,\r\n          },\r\n          native: {},\r\n        },\r\n      );\r\n\r\n      await this.setObjectNotExistsAsync(\r\n        `${this.config.plantId}.current_power`,\r\n        {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"current_power\",\r\n            type: \"number\",\r\n            unit: \"kW\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: true,\r\n          },\r\n          native: {},\r\n        },\r\n      );\r\n\r\n      await this.setObjectNotExistsAsync(\r\n        `${this.config.plantId}.current_from_net`,\r\n        {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"current_from_net\",\r\n            type: \"number\",\r\n            unit: \"kW\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: true,\r\n          },\r\n          native: {},\r\n        },\r\n      );\r\n\r\n      await this.setObjectNotExistsAsync(`${this.config.plantId}.sold_today`, {\r\n        type: \"state\",\r\n        common: {\r\n          name: \"sold_today\",\r\n          type: \"number\",\r\n          unit: \"kWh\",\r\n          role: \"value\",\r\n          read: true,\r\n          write: true,\r\n        },\r\n        native: {},\r\n      });\r\n      await this.setObjectNotExistsAsync(\r\n        `${this.config.plantId}.generated_today`,\r\n        {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"generated_today\",\r\n            type: \"number\",\r\n            unit: \"kWh\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: true,\r\n          },\r\n          native: {},\r\n        },\r\n      );\r\n\r\n      await this.setObjectNotExistsAsync(\r\n        `${this.config.plantId}.bought_today`,\r\n        {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"bought_today\",\r\n            type: \"number\",\r\n            unit: \"kWh\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: true,\r\n          },\r\n          native: {},\r\n        },\r\n      );\r\n\r\n      await this.setObjectNotExistsAsync(\r\n        `${this.config.plantId}.consumption_today`,\r\n        {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"consumption_today\",\r\n            type: \"number\",\r\n            unit: \"kWh\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: true,\r\n          },\r\n          native: {},\r\n        },\r\n      );\r\n\r\n      await this.setObjectNotExistsAsync(\r\n        `${this.config.plantId}.battery_percent`,\r\n        {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"battery_percent\",\r\n            type: \"number\",\r\n            unit: \"%\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: true,\r\n          },\r\n          native: {},\r\n        },\r\n      );\r\n\r\n      await this.setObjectNotExistsAsync(\r\n        `${this.config.plantId}.battery_current_usage`,\r\n        {\r\n          type: \"state\",\r\n          common: {\r\n            name: \"battery_current_usage\",\r\n            type: \"number\",\r\n            unit: \"kW\",\r\n            role: \"value\",\r\n            read: true,\r\n            write: true,\r\n          },\r\n          native: {},\r\n        },\r\n      );\r\n    }\r\n\r\n    if (this.config.apiKey && this.config.apiSecret && this.config.plantId) {\r\n      this.log.info(\r\n        `Start polling soliscloud, polling every ${this.config.pollInterval} seconds`,\r\n      );\r\n      this.intervalId = this.setInterval(async () => {\r\n        await this.pollSolis();\r\n      }, this.config.pollInterval * 1000);\r\n    }\r\n  }\r\n\r\n  private async pollSolis() {\r\n    const callResult = await getStationDetails(\r\n      this.config.plantId,\r\n      this.config.apiKey,\r\n      this.config.apiSecret,\r\n    );\r\n    await this.setStateAsync(\r\n      `${this.config.plantId}.current_consumption`,\r\n      callResult?.current_consumption,\r\n    );\r\n    await this.setStateAsync(\r\n      `${this.config.plantId}.current_power`,\r\n      callResult?.current_power,\r\n    );\r\n    await this.setStateAsync(\r\n      `${this.config.plantId}.current_from_net`,\r\n      callResult?.current_from_net,\r\n    );\r\n    await this.setStateAsync(\r\n      `${this.config.plantId}.sold_today`,\r\n      callResult?.sold_today,\r\n    );\r\n    await this.setStateAsync(\r\n      `${this.config.plantId}.generated_today`,\r\n      callResult?.generated_today,\r\n    );\r\n    await this.setStateAsync(\r\n      `${this.config.plantId}.bought_today`,\r\n      callResult?.bought_today,\r\n    );\r\n    await this.setStateAsync(\r\n      `${this.config.plantId}.consumption_today`,\r\n      callResult?.consumption_today,\r\n    );\r\n    await this.setStateAsync(\r\n      `${this.config.plantId}.battery_percent`,\r\n      callResult?.battery_percent,\r\n    );\r\n    await this.setStateAsync(\r\n      `${this.config.plantId}.battery_current_usage`,\r\n      callResult?.battery_current_usage,\r\n    );\r\n  }\r\n\r\n  private onUnload(callback: () => void): void {\r\n    try {\r\n      this.log.info(\"Stopping soliscloud polling\");\r\n      this.clearInterval(this.intervalId);\r\n      callback();\r\n    } catch (e) {\r\n      this.log.info(\"Error while stopping polling: \" + e);\r\n      callback();\r\n    }\r\n  }\r\n}\r\n\r\nif (require.main !== module) {\r\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\r\n    new soliscloud(options);\r\n} else {\r\n  (() => new soliscloud())();\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_apiHelper"]
}

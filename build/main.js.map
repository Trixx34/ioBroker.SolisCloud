{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from \"@iobroker/adapter-core\";\r\nimport { getStationDetails } from \"./lib/apiHelper\";\r\nimport \"./lib/apiHelper\";\r\n\r\nclass soliscloud extends utils.Adapter {\r\n\tprivate running = false;\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: \"soliscloud\",\r\n\t\t});\r\n\t\tthis.on(\"ready\", this.onReady.bind(this));\r\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\r\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\r\n\t\t// this.on(\"message\", this.onMessage.bind(this));\r\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\r\n\t}\r\n\r\n\tprivate async onReady(): Promise<void> {\r\n\t\tthis.log.info(\"Starting soliscloud adapter\");\r\n\t\tawait this.setObjectNotExistsAsync(\"current_Consumption\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"currentConsumption\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"current_Power\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"current_Power\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"current_From_Net\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"current_From_Net\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"sold_Today\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"sold_Today\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\t\tawait this.setObjectNotExistsAsync(\"generated_Today\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"generated_Today\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"bought_Today\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"bought_Today\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"consumption_Today\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"consumption_Today\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"battery_percent\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"battery_percent\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tawait this.setObjectNotExistsAsync(\"battery_current_usage\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"battery_current_usage\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});\r\n\r\n\t\tif (this.config.apiKey && this.config.apiSecret && this.config.plantId && this.config.pollInterval >= 30) {\r\n\t\t\tthis.log.info(`Start polling soliscloud, polling every ${this.config.pollInterval} seconds`);\r\n\t\t\tthis.running = true;\r\n\t\t\twhile (this.running) {\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst callResult = await getStationDetails(this.config.plantId, this.config.apiKey, this.config.apiSecret);\r\n\t\t\t\t\tawait this.setStateAsync(\"current_Consumption\", callResult?.current_consumption);\r\n\t\t\t\t\tawait this.setStateAsync(\"current_Power\", callResult?.current_Power);\r\n\t\t\t\t\tawait this.setStateAsync(\"current_From_Net\", callResult?.current_From_Net);\r\n\t\t\t\t\tawait this.setStateAsync(\"sold_Today\", callResult?.sold_Today);\r\n\t\t\t\t\tawait this.setStateAsync(\"generated_Today\", callResult?.generated_Today);\r\n\t\t\t\t\tawait this.setStateAsync(\"bought_Today\", callResult?.bought_Today);\r\n\t\t\t\t\tawait this.setStateAsync(\"consumption_Today\", callResult?.consumption_Today);\r\n\t\t\t\t\tawait this.setStateAsync(\"battery_percent\", callResult?.battery_percent);\r\n\t\t\t\t\tawait this.setStateAsync(\"battery_current_usage\", callResult?.battery_current_usage);\r\n\r\n\t\t\t\t\t//Wait 30 seconds and loop again. #TODO make interval configurable\r\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 30000));\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tthis.log.error(`Error while calling solis api, retrying in ${this.config.pollInterval} seconds`);\r\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, this.config.pollInterval * 1000));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.log.info(\"Can't start polling, missing needed settings.\");\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\ttry {\r\n\t\t\tthis.log.info(\"Stopping soliscloud polling\");\r\n\t\t\tthis.running = false;\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tthis.log.info(\"Error while stopping polling: \" + e);\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n\t\tif (state) {\r\n\t\t\t// The state was changed\r\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new soliscloud(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new soliscloud())();\r\n}"],
  "mappings": "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",
  "names": ["import_apiHelper"]
}

{
  "version": 3,
  "sources": ["../../src/lib/apiHelper.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\nimport axios from \"axios\";\nimport crypto from \"crypto\";\nconst API_BASE_URL = \"https://www.soliscloud.com:13333\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport async function getStationDetails(\n  this: any,\n  stationId: string,\n  apiKey: string,\n  apiSecret: string,\n) {\n  const map = {\n    id: stationId,\n  };\n  const body = JSON.stringify(map);\n  const ContentMd5 = getDigest(body);\n  const currentDate = getGMTTime();\n  const param =\n    \"POST\" +\n    \"\\n\" +\n    ContentMd5 +\n    \"\\n\" +\n    \"application/json\" +\n    \"\\n\" +\n    currentDate +\n    \"\\n\" +\n    \"/v1/api/stationDetail\";\n  const sign = HmacSHA1Encrypt(param, apiSecret);\n  //todo fix logging in apihelper\n  //logger.info(`Encrypted SHA1 (this can NOT be retraced to your API secret): ${sign}`);\n  const url = API_BASE_URL + \"/v1/api/stationDetail\";\n  try {\n    const requestBody = JSON.stringify(map);\n    //this.log.debug(`Requestbody: ${JSON.stringify(map)}`);\n    const response = await axios({\n      method: \"post\",\n      url: url,\n      headers: {\n        \"Content-type\": \"application/json;charset=UTF-8\",\n        Authorization: `API ${apiKey}:${sign}`,\n        \"Content-MD5\": ContentMd5,\n        Date: currentDate,\n      },\n      data: requestBody,\n      timeout: 5000,\n    });\n    //this.log.debug(`API response was: ${response.data}`);\n    return {\n      current_power: response.data.data.power,\n      current_consumption: response.data.data.familyLoadPower,\n      current_from_net: response.data.data.psum,\n      sold_today: response.data.data.gridSellDayEnergy,\n      generated_today: response.data.data.dayEnergy,\n      bought_today: response.data.data.gridPurchasedDayEnergy,\n      consumption_today: response.data.data.homeLoadEnergy,\n      battery_percent: response.data.data.batteryPercent,\n      battery_current_usage: response.data.data.batteryPower,\n    };\n  } catch (error) {\n    this.log.error(error);\n  }\n}\n\nexport function HmacSHA1Encrypt(\n  encryptText: string,\n  keySecret: string,\n): string {\n  const keyBuffer = Buffer.from(keySecret, \"utf-8\");\n  const hmac = crypto.createHmac(\"sha1\", keyBuffer);\n  hmac.update(encryptText, \"utf-8\");\n  const resultBuffer = hmac.digest();\n  return resultBuffer.toString(\"base64\");\n}\n\nexport function getGMTTime(): string {\n  const cd = new Date();\n  const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  return `${days[cd.getUTCDay()]}, ${cd.getUTCDate()} ${\n    months[cd.getUTCMonth()]\n  } ${cd.getUTCFullYear()} ${cd.getUTCHours()}:${cd.getUTCMinutes()}:${cd.getUTCSeconds()} GMT`;\n}\n\nexport function getDigest(test: string): string {\n  const md5 = crypto.createHash(\"md5\");\n  md5.update(test);\n  return md5.digest(\"base64\");\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAkB;AAClB,oBAAmB;AACnB,MAAM,eAAe;AAGrB,eAAsB,kBAEpB,WACA,QACA,WACA;AACA,QAAM,MAAM;AAAA,IACV,IAAI;AAAA,EACN;AACA,QAAM,OAAO,KAAK,UAAU,GAAG;AAC/B,QAAM,aAAa,UAAU,IAAI;AACjC,QAAM,cAAc,WAAW;AAC/B,QAAM,QACJ,WAEA,aACA,yBAGA,cACA;AAEF,QAAM,OAAO,gBAAgB,OAAO,SAAS;AAG7C,QAAM,MAAM,eAAe;AAC3B,MAAI;AACF,UAAM,cAAc,KAAK,UAAU,GAAG;AAEtC,UAAM,WAAW,UAAM,aAAAA,SAAM;AAAA,MAC3B,QAAQ;AAAA,MACR;AAAA,MACA,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe,OAAO,UAAU;AAAA,QAChC,eAAe;AAAA,QACf,MAAM;AAAA,MACR;AAAA,MACA,MAAM;AAAA,MACN,SAAS;AAAA,IACX,CAAC;AAED,WAAO;AAAA,MACL,eAAe,SAAS,KAAK,KAAK;AAAA,MAClC,qBAAqB,SAAS,KAAK,KAAK;AAAA,MACxC,kBAAkB,SAAS,KAAK,KAAK;AAAA,MACrC,YAAY,SAAS,KAAK,KAAK;AAAA,MAC/B,iBAAiB,SAAS,KAAK,KAAK;AAAA,MACpC,cAAc,SAAS,KAAK,KAAK;AAAA,MACjC,mBAAmB,SAAS,KAAK,KAAK;AAAA,MACtC,iBAAiB,SAAS,KAAK,KAAK;AAAA,MACpC,uBAAuB,SAAS,KAAK,KAAK;AAAA,IAC5C;AAAA,EACF,SAAS,OAAP;AACA,SAAK,IAAI,MAAM,KAAK;AAAA,EACtB;AACF;AAEO,SAAS,gBACd,aACA,WACQ;AACR,QAAM,YAAY,OAAO,KAAK,WAAW,OAAO;AAChD,QAAM,OAAO,cAAAC,QAAO,WAAW,QAAQ,SAAS;AAChD,OAAK,OAAO,aAAa,OAAO;AAChC,QAAM,eAAe,KAAK,OAAO;AACjC,SAAO,aAAa,SAAS,QAAQ;AACvC;AAEO,SAAS,aAAqB;AACnC,QAAM,KAAK,IAAI,KAAK;AACpB,QAAM,OAAO,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AAC7D,QAAM,SAAS;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,SAAO,GAAG,KAAK,GAAG,UAAU,OAAO,GAAG,WAAW,KAC/C,OAAO,GAAG,YAAY,MACpB,GAAG,eAAe,KAAK,GAAG,YAAY,KAAK,GAAG,cAAc,KAAK,GAAG,cAAc;AACxF;AAEO,SAAS,UAAU,MAAsB;AAC9C,QAAM,MAAM,cAAAA,QAAO,WAAW,KAAK;AACnC,MAAI,OAAO,IAAI;AACf,SAAO,IAAI,OAAO,QAAQ;AAC5B;",
  "names": ["axios", "crypto"]
}

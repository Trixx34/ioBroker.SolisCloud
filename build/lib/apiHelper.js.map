{
  "version": 3,
  "sources": ["../../src/lib/apiHelper.ts"],
  "sourcesContent": ["import axios from \"axios\";\r\nimport crypto from \"crypto\";\r\n\r\nconst API_BASE_URL = \"https://www.soliscloud.com:13333\";\r\n\r\nexport async function getStationDetails(\r\n\tadapter: any\r\n): Promise<any> {\r\n\tconst map = {\r\n\t\tid: adapter.config.stationId,\r\n\t};\r\n\tconst body = JSON.stringify(map);\r\n\tconst ContentMd5 = getDigest(body);\r\n\tconst currentDate = getGMTTime();\r\n\tconst param =\r\n\t\t\"POST\" +\r\n\t\t\"\\n\" +\r\n\t\tContentMd5 +\r\n\t\t\"\\n\" +\r\n\t\t\"application/json\" +\r\n\t\t\"\\n\" +\r\n\t\tcurrentDate +\r\n\t\t\"\\n\" +\r\n\t\t\"/v1/api/stationDetail\";\r\n\tconst sign = HmacSHA1Encrypt(param, adapter.config.apiSecret);\r\n\tconst url = API_BASE_URL + \"/v1/api/stationDetail\";\r\n\tif (adapter.config.debugLogging) {\r\n\t\tadapter.log.debug(`Stationdetails URL: ${url}`);\r\n\t}\r\n\ttry {\r\n\t\tconst requestBody = JSON.stringify(map);\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"post\",\r\n\t\t\turl: url,\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\tAuthorization: `API ${adapter.config.apiKey}:${sign}`,\r\n\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\tDate: currentDate,\r\n\t\t\t},\r\n\t\t\tdata: requestBody,\r\n\t\t\ttimeout: 5000,\r\n\t\t});\r\n\t\tif (adapter.config.debugLogging) {\r\n\t\t\tadapter.log.debug(`API response (Station) was:` + JSON.stringify(response.data.data));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tcurrent_power: response.data.data.power,\r\n\t\t\tcurrent_consumption: response.data.data.familyLoadPower,\r\n\t\t\tcurrent_from_net: response.data.data.psum,\r\n\t\t\tsold_today: response.data.data.gridSellDayEnergy,\r\n\t\t\tgenerated_today: response.data.data.dayEnergy,\r\n\t\t\tbought_today: response.data.data.gridPurchasedDayEnergy,\r\n\t\t\tconsumption_today: response.data.data.homeLoadEnergy,\r\n\t\t\tbattery_percent: response.data.data.batteryPercent,\r\n\t\t\tbattery_current_usage: response.data.data.batteryPower,\r\n\t\t\tbattery_today_charge: response.data.data.batteryChargeEnergy,\r\n\t\t\tbattery_today_discharge: response.data.data.batteryDischargeEnergy,\r\n\t\t\ttotal_consumption_energy: response.data.data.homeLoadEnergy,\r\n\t\t\tself_consumption_energy: response.data.data.oneSelf,\r\n\t\t\tplant_state: response.data.data.state,\r\n\t\t\tbattery_month_charge_energy: response.data.data.batteryChargeMonthEnergy,\r\n\t\t\tbattery_month_charge_energy_units: response.data.data.batteryChargeMonthEnergyStr,\r\n\t\t\tbattery_year_charge_energy: response.data.data.batteryChargeYearEnergy,\r\n\t\t\tbattery_year_charge_energy_units: response.data.data.batteryChargeYearEnergyStr,\r\n\t\t\tbattery_month_discharge_energy: response.data.data.batteryDischargeMonthEnergy,\r\n\t\t\tbattery_month_discharge_energy_units: response.data.data.batteryDischargeMonthEnergyStr,\r\n\t\t\tbattery_year_discharge_energy: response.data.data.batteryDischargeYearEnergy,\r\n\t\t\tbattery_year_discharge_energy_units: response.data.data.batteryDischargeYearEnergyStr,\r\n\t\t};\r\n\t} catch (error) {\r\n\t\tadapter.logErrorWithSentry(adapter, error, \"getStationDetails\");\r\n\t}\r\n}\r\n\r\nexport async function getInverterList(\r\n\tadapter: any\r\n): Promise<any> {\r\n\tconst map = {\r\n\t\tpageNo: 1,\r\n\t\tpageSize: 20,\r\n\t\tstationId: adapter.config.plantId,\r\n\t};\r\n\tconst body = JSON.stringify(map);\r\n\tconst ContentMd5 = getDigest(body);\r\n\tconst currentDate = getGMTTime();\r\n\tconst param =\r\n\t\t\"POST\" +\r\n\t\t\"\\n\" +\r\n\t\tContentMd5 +\r\n\t\t\"\\n\" +\r\n\t\t\"application/json\" +\r\n\t\t\"\\n\" +\r\n\t\tcurrentDate +\r\n\t\t\"\\n\" +\r\n\t\t\"/v1/api/inverterList\";\r\n\tconst sign = HmacSHA1Encrypt(param, adapter.config.apiSecret);\r\n\tconst url = API_BASE_URL + \"/v1/api/inverterList\";\r\n\tif (adapter.config.debugLogging) {\r\n\t\tadapter.log.debug(`Inverterlist URL: ${url}`);\r\n\t}\r\n\ttry {\r\n\t\tconst requestBody = JSON.stringify(map);\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"post\",\r\n\t\t\turl: url,\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\tAuthorization: `API ${adapter.config.apiKey}:${sign}`,\r\n\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\tDate: currentDate,\r\n\t\t\t},\r\n\t\t\tdata: requestBody,\r\n\t\t\ttimeout: 5000,\r\n\t\t});\r\n\t\tif (adapter.config.debugLogging) {\r\n\t\t\tadapter.log.debug(`API response (InverterList) was:` + JSON.stringify(response.data.data.page.records[0]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tinverter_state: response.data.data.page.records[0].state,\r\n\t\t\tetoday: response.data.data.page.records[0].etoday,\r\n\t\t\tinverter_id: response.data.data.page.records[0].id,\r\n\t\t\tinverter_serial_number: response.data.data.page.records[0].sn,\r\n\t\t};\r\n\t} catch (e) {\r\n\t\tadapter.logErrorWithSentry(adapter, e, \"getInverterList\");\r\n\t}\r\n}\r\n\r\nexport async function getInverterDetails(\r\n\tadapter: any\r\n): Promise<any> {\r\n\tconst map = {\r\n\t\tid: adapter.config.plantId\r\n\t};\r\n\tconst body = JSON.stringify(map);\r\n\tconst ContentMd5 = getDigest(body);\r\n\tconst currentDate = getGMTTime();\r\n\tconst param =\r\n\t\t\"POST\" +\r\n\t\t\"\\n\" +\r\n\t\tContentMd5 +\r\n\t\t\"\\n\" +\r\n\t\t\"application/json\" +\r\n\t\t\"\\n\" +\r\n\t\tcurrentDate +\r\n\t\t\"\\n\" +\r\n\t\t\"/v1/api/inverterDetail\";\r\n\tconst sign = HmacSHA1Encrypt(param, adapter.config.apiSecret);\r\n\tconst url = API_BASE_URL + \"/v1/api/inverterDetail\";\r\n\t//if (adapter.config.debugLogging) {\r\n\tadapter.log.debug(`Inverterdetails URL: ${url}`);\r\n\t//}\r\n\ttry {\r\n\t\tconst requestBody = JSON.stringify(map);\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"post\",\r\n\t\t\turl: url,\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\tAuthorization: `API ${adapter.config.apiKey}:${sign}`,\r\n\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\tDate: currentDate,\r\n\t\t\t},\r\n\t\t\tdata: requestBody,\r\n\t\t\ttimeout: 5000,\r\n\t\t});\r\n\t\tif (adapter.config.debugLogging) {\r\n\t\t\tadapter.log.debug(`API response (Inverterdetail) was:` + JSON.stringify(response.data));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tac_current_R: response.data.data.iAc1,\r\n\t\t\tac_current_S: response.data.data.iAc2,\r\n\t\t\tac_current_T: response.data.data.iAc3,\r\n\t\t\tac_voltage_R: response.data.data.uAc1,\r\n\t\t\tac_voltage_S: response.data.data.uAc2,\r\n\t\t\tac_voltage_T: response.data.data.uAc3,\r\n\t\t\tfamily_load_power_units: response.data.data.familyLoadPowerStr,\r\n\t\t\tfamily_load_power: response.data.data.familyLoadPower,\r\n\t\t\ttemperature: response.data.data.inverterTemperature,\r\n\t\t\tbattery_power: response.data.data.batteryPower,\r\n\t\t\tbattery_power_units: response.data.data.batterypowerStr,\r\n\t\t\tbattery_power_percentage: response.data.data.batteryPowerPec,\r\n\t\t\tbattery_today_charge_energy: response.data.data.batteryTodayChargeEnergy,\r\n\t\t\tbattery_today_charge_energy_units: response.data.data.batteryTodayChargeEnergyStr,\r\n\t\t\tbattery_total_charge_energy: response.data.data.batteryTotalChargeEnergy,\r\n\t\t\tbattery_total_charge_energy_units: response.data.data.batteryTotalChargeEnergyStr,\r\n\t\t\tbattery_today_discharge_energy: response.data.data.batteryTodayDischargeEnergy,\r\n\t\t\tbattery_today_discharge_energy_units: response.data.data.batteryTodayDischargeEnergyStr,\r\n\t\t\tbattery_total_discharge_energy: response.data.data.batteryTotalDischargeEnergy,\r\n\t\t\tbattery_total_discharge_energy_units: response.data.data.batteryTotalDischargeEnergyStr,\r\n\t\t};\r\n\t} catch (e) {\r\n\t\tadapter.logErrorWithSentry(adapter, e, \"getInverterDetails\");\r\n\t}\r\n}\r\n\r\nexport async function getEpmDetails(\r\n\tadapter: any\r\n): Promise<any> {\r\n\tconst map = {\r\n\t\tpageNo: 1,\r\n\t\tpageSize: 20,\r\n\t\tid: adapter.config.plantId\r\n\t};\r\n\tconst body = JSON.stringify(map);\r\n\tconst ContentMd5 = getDigest(body);\r\n\tconst currentDate = getGMTTime();\r\n\tconst param =\r\n\t\t\"POST\" +\r\n\t\t\"\\n\" +\r\n\t\tContentMd5 +\r\n\t\t\"\\n\" +\r\n\t\t\"application/json\" +\r\n\t\t\"\\n\" +\r\n\t\tcurrentDate +\r\n\t\t\"\\n\" +\r\n\t\t\"/v1/api/epmList\";\r\n\tconst sign = HmacSHA1Encrypt(param, adapter.config.apiSecret);\r\n\tconst url = API_BASE_URL + \"/v1/api/epmList\";\r\n\tif (adapter.condfig.debugLogging) {\r\n\t\tadapter.log.debug(`EPMlist URL: ${url}`);\r\n\t}\r\n\ttry {\r\n\t\tconst requestBody = JSON.stringify(map);\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"post\",\r\n\t\t\turl: url,\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\tAuthorization: `API ${adapter.config.apiKey}:${sign}`,\r\n\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\tDate: currentDate,\r\n\t\t\t},\r\n\t\t\tdata: requestBody,\r\n\t\t\ttimeout: 5000,\r\n\t\t});\r\n\t\tif (adapter.config.debugLogging) {\r\n\t\t\tadapter.log.debug(`API response (EPM detail) was:` + JSON.stringify(response.data));\r\n\t\t}\r\n\t\treturn {\r\n\t\t};\r\n\t} catch (e) {\r\n\t\tadapter.logErrorWithSentry(adapter, e, \"getEpmDetails\");\r\n\t}\r\n}\r\n\r\nexport function HmacSHA1Encrypt(\r\n\tencryptText: string,\r\n\tkeySecret: string,\r\n): string {\r\n\tconst keyBuffer = Buffer.from(keySecret, \"utf-8\");\r\n\tconst hmac = crypto.createHmac(\"sha1\", keyBuffer);\r\n\thmac.update(encryptText, \"utf-8\");\r\n\tconst resultBuffer = hmac.digest();\r\n\treturn resultBuffer.toString(\"base64\");\r\n}\r\n\r\nexport function getGMTTime(): string {\r\n\tconst cd = new Date();\r\n\tconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\tconst months = [\r\n\t\t\"Jan\",\r\n\t\t\"Feb\",\r\n\t\t\"Mar\",\r\n\t\t\"Apr\",\r\n\t\t\"May\",\r\n\t\t\"Jun\",\r\n\t\t\"Jul\",\r\n\t\t\"Aug\",\r\n\t\t\"Sep\",\r\n\t\t\"Oct\",\r\n\t\t\"Nov\",\r\n\t\t\"Dec\",\r\n\t];\r\n\treturn `${days[cd.getUTCDay()]}, ${cd.getUTCDate()} ${months[cd.getUTCMonth()]\r\n\t\t// eslint-disable-next-line @typescript-eslint/indent\r\n\t\t} ${cd.getUTCFullYear()} ${cd.getUTCHours()}:${cd.getUTCMinutes()}:${cd.getUTCSeconds()} GMT`;\r\n}\r\n\r\nexport function getDigest(test: string): string {\r\n\t// deepcode ignore InsecureHash: Solis API needs MD5 hash, no option to update at this time.\r\n\tconst md5 = crypto.createHash(\"md5\");\r\n\tmd5.update(test);\r\n\treturn md5.digest(\"base64\");\r\n}\r\n"],
  "mappings": "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",
  "names": ["axios", "crypto"]
}

{
  "version": 3,
  "sources": ["../../src/lib/apiHelper.ts"],
  "sourcesContent": ["import axios from \"axios\";\r\nimport crypto from \"crypto\";\r\nconst API_BASE_URL = \"https://www.soliscloud.com:13333\";\r\n\r\nexport async function getStationDetails(\r\n  this: any,\r\n  stationId: string,\r\n  apiKey: string,\r\n  apiSecret: string,\r\n  apiLogger: any\r\n): Promise<any> {\r\n  const map = {\r\n    id: stationId,\r\n  };\r\n  const body = JSON.stringify(map);\r\n  const ContentMd5 = getDigest(body);\r\n  const currentDate = getGMTTime();\r\n  const param =\r\n    \"POST\" +\r\n    \"\\n\" +\r\n    ContentMd5 +\r\n    \"\\n\" +\r\n    \"application/json\" +\r\n    \"\\n\" +\r\n    currentDate +\r\n    \"\\n\" +\r\n    \"/v1/api/stationDetail\";\r\n  const sign = HmacSHA1Encrypt(param, apiSecret);\r\n  const url = API_BASE_URL + \"/v1/api/stationDetail\";\r\n  apiLogger.debug(`Stationdetails URL: ${url}`);\r\n  try {\r\n    const requestBody = JSON.stringify(map);\r\n    const response = await axios({\r\n      method: \"post\",\r\n      url: url,\r\n      headers: {\r\n        \"Content-type\": \"application/json;charset=UTF-8\",\r\n        Authorization: `API ${apiKey}:${sign}`,\r\n        \"Content-MD5\": ContentMd5,\r\n        Date: currentDate,\r\n      },\r\n      data: requestBody,\r\n      timeout: 5000,\r\n    });\r\n    //apiLogger.debug(`API response (Station) was:` + JSON.stringify(response.data.data));\r\n    return {\r\n      current_power: response.data.data.power,\r\n      current_consumption: response.data.data.familyLoadPower,\r\n      current_from_net: response.data.data.psum,\r\n      sold_today: response.data.data.gridSellDayEnergy,\r\n      generated_today: response.data.data.dayEnergy,\r\n      bought_today: response.data.data.gridPurchasedDayEnergy,\r\n      consumption_today: response.data.data.homeLoadEnergy,\r\n      battery_percent: response.data.data.batteryPercent,\r\n      battery_current_usage: response.data.data.batteryPower,\r\n      battery_today_charge: response.data.data.batteryChargeEnergy,\r\n      battery_today_discharge: response.data.data.batteryDischargeEnergy,\r\n      total_consumption_energy: response.data.data.homeLoadEnergy,\r\n      self_consumption_energy: response.data.data.oneSelf,\r\n      plant_state: response.data.data.state,\r\n      battery_month_charge_energy: response.data.data.batteryChargeMonthEnergy,\r\n      battery_month_charge_energy_units: response.data.data.batteryChargeMonthEnergyStr,\r\n      battery_year_charge_energy: response.data.data.batteryChargeYearEnergy,\r\n      battery_year_charge_energy_units: response.data.data.batteryChargeYearEnergyStr,\r\n      battery_month_discharge_energy: response.data.data.batteryDischargeMonthEnergy,\r\n      battery_month_discharge_energy_units: response.data.data.batteryDischargeMonthEnergyStr,\r\n      battery_year_discharge_energy: response.data.data.batteryDischargeYearEnergy,\r\n      battery_year_discharge_energy_units: response.data.data.batteryDischargeYearEnergyStr,\r\n    };\r\n  } catch (error) {\r\n    apiLogger.error(error);\r\n  }\r\n}\r\n\r\nexport async function getInverterList(\r\n  this: any,\r\n  stationId: string,\r\n  apiKey: string,\r\n  apiSecret: string,\r\n  apiLogger: any\r\n): Promise<any> {\r\n  const map = {\r\n    pageNo: 1,\r\n    pageSize: 20,\r\n    stationId: stationId\r\n  };\r\n  const body = JSON.stringify(map);\r\n  const ContentMd5 = getDigest(body);\r\n  const currentDate = getGMTTime();\r\n  const param =\r\n    \"POST\" +\r\n    \"\\n\" +\r\n    ContentMd5 +\r\n    \"\\n\" +\r\n    \"application/json\" +\r\n    \"\\n\" +\r\n    currentDate +\r\n    \"\\n\" +\r\n    \"/v1/api/inverterList\";\r\n  const sign = HmacSHA1Encrypt(param, apiSecret);\r\n  const url = API_BASE_URL + \"/v1/api/inverterList\";\r\n  apiLogger.debug(`Inverterlist URL: ${url}`);\r\n  try {\r\n    const requestBody = JSON.stringify(map);\r\n    const response = await axios({\r\n      method: \"post\",\r\n      url: url,\r\n      headers: {\r\n        \"Content-type\": \"application/json;charset=UTF-8\",\r\n        Authorization: `API ${apiKey}:${sign}`,\r\n        \"Content-MD5\": ContentMd5,\r\n        Date: currentDate,\r\n      },\r\n      data: requestBody,\r\n      timeout: 5000,\r\n    });\r\n    //apiLogger.debug(`API response (InverterList) was:` + JSON.stringify(response.data.data.page.records[0]));\r\n    return {\r\n      inverter_state: response.data.data.page.records[0].state,\r\n      etoday: response.data.data.page.records[0].etoday,\r\n      inverter_id: response.data.data.page.records[0].id,\r\n      inverter_serial_number: response.data.data.page.records[0].sn,\r\n    }\r\n  } catch (e) {\r\n    apiLogger.error(e)\r\n  }\r\n}\r\n\r\nexport async function getInverterDetails(\r\n  this: any,\r\n  inverterId: string,\r\n  apiKey: string,\r\n  apiSecret: string,\r\n  apiLogger: any\r\n): Promise<any> {\r\n  const map = {\r\n    id: inverterId\r\n  };\r\n  const body = JSON.stringify(map);\r\n  const ContentMd5 = getDigest(body);\r\n  const currentDate = getGMTTime();\r\n  const param =\r\n    \"POST\" +\r\n    \"\\n\" +\r\n    ContentMd5 +\r\n    \"\\n\" +\r\n    \"application/json\" +\r\n    \"\\n\" +\r\n    currentDate +\r\n    \"\\n\" +\r\n    \"/v1/api/inverterDetail\";\r\n  const sign = HmacSHA1Encrypt(param, apiSecret);\r\n  const url = API_BASE_URL + \"/v1/api/inverterDetail\";\r\n  apiLogger.debug(`Inverterdetails URL: ${url}`);\r\n  try {\r\n    const requestBody = JSON.stringify(map);\r\n    const response = await axios({\r\n      method: \"post\",\r\n      url: url,\r\n      headers: {\r\n        \"Content-type\": \"application/json;charset=UTF-8\",\r\n        Authorization: `API ${apiKey}:${sign}`,\r\n        \"Content-MD5\": ContentMd5,\r\n        Date: currentDate,\r\n      },\r\n      data: requestBody,\r\n      timeout: 5000,\r\n    });\r\n    //apiLogger.debug(`API response (Inverterdetail) was:` + JSON.stringify(response.data));\r\n    return {\r\n      ac_current_R: response.data.data.iAc1,\r\n      ac_current_S: response.data.data.iAc2,\r\n      ac_current_T: response.data.data.iAc3,\r\n      ac_voltage_R: response.data.data.uAc1,\r\n      ac_voltage_S: response.data.data.uAc2,\r\n      ac_voltage_T: response.data.data.uAc3,\r\n      family_load_power_units: response.data.data.familyLoadPowerStr,\r\n      family_load_power: response.data.data.familyLoadPower,\r\n      temperature: response.data.data.inverterTemperature,\r\n      battery_power: response.data.data.batteryPower,\r\n      battery_power_units: response.data.data.batterypowerStr,\r\n      battery_power_percentage: response.data.data.batteryPowerPec,\r\n      battery_today_charge_energy: response.data.data.batteryTodayChargeEnergy,\r\n      battery_today_charge_energy_units: response.data.data.batteryTodayChargeEnergyStr,\r\n      battery_total_charge_energy: response.data.data.batteryTotalChargeEnergy,\r\n      battery_total_charge_energy_units: response.data.data.batteryTotalChargeEnergyStr,\r\n      battery_today_discharge_energy: response.data.data.batteryTodayDischargeEnergy,\r\n      battery_today_discharge_energy_units: response.data.data.batteryTodayDischargeEnergyStr,\r\n      battery_total_discharge_energy: response.data.data.batteryTotalDischargeEnergy,\r\n      battery_total_discharge_energy_units: response.data.data.batteryTotalDischargeEnergyStr,\r\n    }\r\n  } catch (e) {\r\n    apiLogger.error(e)\r\n  }\r\n}\r\n\r\nexport async function getEplDetails(\r\n  this: any,\r\n  inverterId: string,\r\n  apiKey: string,\r\n  apiSecret: string,\r\n  apiLogger: any\r\n): Promise<any> {\r\n  const map = {\r\n    id: inverterId\r\n  };\r\n  const body = JSON.stringify(map);\r\n  const ContentMd5 = getDigest(body);\r\n  const currentDate = getGMTTime();\r\n  const param =\r\n    \"POST\" +\r\n    \"\\n\" +\r\n    ContentMd5 +\r\n    \"\\n\" +\r\n    \"application/json\" +\r\n    \"\\n\" +\r\n    currentDate +\r\n    \"\\n\" +\r\n    \"/v1/api/inverterDetail\";\r\n  const sign = HmacSHA1Encrypt(param, apiSecret);\r\n  const url = API_BASE_URL + \"/v1/api/inverterDetail\";\r\n  apiLogger.debug(`Inverterdetails URL: ${url}`);\r\n  try {\r\n    const requestBody = JSON.stringify(map);\r\n    const response = await axios({\r\n      method: \"post\",\r\n      url: url,\r\n      headers: {\r\n        \"Content-type\": \"application/json;charset=UTF-8\",\r\n        Authorization: `API ${apiKey}:${sign}`,\r\n        \"Content-MD5\": ContentMd5,\r\n        Date: currentDate,\r\n      },\r\n      data: requestBody,\r\n      timeout: 5000,\r\n    });\r\n    //apiLogger.debug(`API response (Inverterdetail) was:` + JSON.stringify(response.data));\r\n    return {\r\n\r\n    }\r\n  } catch (e) {\r\n    apiLogger.error(e)\r\n  }\r\n}\r\n\r\nexport function HmacSHA1Encrypt(\r\n  encryptText: string,\r\n  keySecret: string,\r\n): string {\r\n  const keyBuffer = Buffer.from(keySecret, \"utf-8\");\r\n  const hmac = crypto.createHmac(\"sha1\", keyBuffer);\r\n  hmac.update(encryptText, \"utf-8\");\r\n  const resultBuffer = hmac.digest();\r\n  return resultBuffer.toString(\"base64\");\r\n}\r\n\r\nexport function getGMTTime(): string {\r\n  const cd = new Date();\r\n  const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n  return `${days[cd.getUTCDay()]}, ${cd.getUTCDate()} ${months[cd.getUTCMonth()]\r\n    } ${cd.getUTCFullYear()} ${cd.getUTCHours()}:${cd.getUTCMinutes()}:${cd.getUTCSeconds()} GMT`;\r\n}\r\n\r\nexport function getDigest(test: string): string {\r\n  const md5 = crypto.createHash(\"md5\");\r\n  md5.update(test);\r\n  return md5.digest(\"base64\");\r\n}\r\n"],
  "mappings": "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",
  "names": ["axios", "crypto"]
}

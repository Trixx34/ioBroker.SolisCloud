{
  "version": 3,
  "sources": ["../../src/lib/apiHelper.ts"],
  "sourcesContent": ["import axios from \"axios\";\r\nimport crypto from \"crypto\";\r\n\r\nconst API_BASE_URL = \"https://www.soliscloud.com:13333\";\r\nconst timeoutMs = 7000;\r\n\r\nexport async function getStationDetails(\r\n\tadapter: any\r\n): Promise<any> {\r\n\tconst map = {\r\n\t\tid: adapter.config.plantId,\r\n\t};\r\n\tconst body = JSON.stringify(map);\r\n\tconst ContentMd5 = getDigest(body);\r\n\tconst currentDate = getGMTTime();\r\n\tconst param =\r\n\t\t\"POST\" +\r\n\t\t\"\\n\" +\r\n\t\tContentMd5 +\r\n\t\t\"\\n\" +\r\n\t\t\"application/json\" +\r\n\t\t\"\\n\" +\r\n\t\tcurrentDate +\r\n\t\t\"\\n\" +\r\n\t\t\"/v1/api/stationDetail\";\r\n\tconst sign = HmacSHA1Encrypt(param, adapter.config.apiSecret);\r\n\tconst url = API_BASE_URL + \"/v1/api/stationDetail\";\r\n\tif (adapter.config.debugLogging) {\r\n\t\tadapter.log.debug(`Stationdetails URL: ${url}`);\r\n\t}\r\n\ttry {\r\n\t\tconst requestBody = JSON.stringify(map);\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"post\",\r\n\t\t\turl: url,\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\tAuthorization: `API ${adapter.config.apiKey}:${sign}`,\r\n\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\tDate: currentDate,\r\n\t\t\t},\r\n\t\t\tdata: requestBody,\r\n\t\t\ttimeout: timeoutMs,\r\n\t\t});\r\n\t\tif (adapter.config.debugLogging) {\r\n\t\t\tadapter.log.debug(`API response (Station) was:` + JSON.stringify(response.data));\r\n\t\t}\r\n\t\tif (response.data?.data) {\r\n\t\t\tconst record = response.data.data;\r\n\t\t\treturn {\r\n\t\t\t\tcurrent_power: record.power,\r\n\t\t\t\tcurrent_consumption: record.familyLoadPower,\r\n\t\t\t\tcurrent_from_net: record.psum,\r\n\t\t\t\tsold_today: record.gridSellDayEnergy,\r\n\t\t\t\tgenerated_today: record.dayEnergy,\r\n\t\t\t\tbought_today: record.gridPurchasedDayEnergy,\r\n\t\t\t\tconsumption_today: record.homeLoadEnergy,\r\n\t\t\t\tbattery_percent: record.batteryPercent,\r\n\t\t\t\tbattery_current_usage: record.batteryPower,\r\n\t\t\t\tbattery_today_charge: record.batteryChargeEnergy,\r\n\t\t\t\tbattery_today_discharge: record.batteryDischargeEnergy,\r\n\t\t\t\ttotal_consumption_energy: record.homeLoadEnergy,\r\n\t\t\t\tself_consumption_energy: record.oneSelf,\r\n\t\t\t\tplant_state: record.state,\r\n\t\t\t\tbattery_month_charge_energy: record.batteryChargeMonthEnergy,\r\n\t\t\t\tbattery_month_charge_energy_units: record.batteryChargeMonthEnergyStr,\r\n\t\t\t\tbattery_year_charge_energy: record.batteryChargeYearEnergy,\r\n\t\t\t\tbattery_year_charge_energy_units: record.batteryChargeYearEnergyStr,\r\n\t\t\t\tbattery_month_discharge_energy: record.batteryDischargeMonthEnergy,\r\n\t\t\t\tbattery_month_discharge_energy_units: record.batteryDischargeMonthEnergyStr,\r\n\t\t\t\tbattery_year_discharge_energy: record.batteryDischargeYearEnergy,\r\n\t\t\t\tbattery_year_discharge_energy_units: record.batteryDischargeYearEnergyStr,\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tadapter.log.error(\"GetStationDetails: could not parse result. Turn on debug logging for more info\");\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tadapter.sentryInstance.getSentryObject().captureException(error);\r\n\t}\r\n}\r\n\r\nexport async function getInverterList(\r\n\tadapter: any\r\n): Promise<any> {\r\n\tconst map = {\r\n\t\tpageNo: 1,\r\n\t\tpageSize: 20,\r\n\t\tstationId: adapter.config.plantId,\r\n\t};\r\n\tconst body = JSON.stringify(map);\r\n\tconst ContentMd5 = getDigest(body);\r\n\tconst currentDate = getGMTTime();\r\n\tconst param =\r\n\t\t\"POST\" +\r\n\t\t\"\\n\" +\r\n\t\tContentMd5 +\r\n\t\t\"\\n\" +\r\n\t\t\"application/json\" +\r\n\t\t\"\\n\" +\r\n\t\tcurrentDate +\r\n\t\t\"\\n\" +\r\n\t\t\"/v1/api/inverterList\";\r\n\tconst sign = HmacSHA1Encrypt(param, adapter.config.apiSecret);\r\n\tconst url = API_BASE_URL + \"/v1/api/inverterList\";\r\n\tif (adapter.config.debugLogging) {\r\n\t\tadapter.log.debug(`Inverterlist URL: ${url}`);\r\n\t}\r\n\ttry {\r\n\t\tconst requestBody = body;\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"post\",\r\n\t\t\turl: url,\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\tAuthorization: `API ${adapter.config.apiKey}:${sign}`,\r\n\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\tDate: currentDate,\r\n\t\t\t},\r\n\t\t\tdata: requestBody,\r\n\t\t\ttimeout: timeoutMs,\r\n\t\t});\r\n\t\tif (adapter.config.debugLogging) {\r\n\t\t\tadapter.log.debug(`API response (InverterList) was:` + JSON.stringify(response.data.data.page.records[0]));\r\n\t\t}\r\n\t\tif (response.data?.data?.page?.records[0]) {\r\n\t\t\tconst record = response.data.data.page.records[0];\r\n\t\t\treturn {\r\n\t\t\t\tinverter_state: record.state,\r\n\t\t\t\tetoday: record.etoday,\r\n\t\t\t\tinverter_id: record.id,\r\n\t\t\t\tinverter_serial_number: record.sn,\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tadapter.log.error(\"GetInverterDetails: could not parse result. Turn on debug logging for more info\");\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tadapter.sentryInstance.getSentryObject().captureException(e);\r\n\t}\r\n}\r\n\r\nexport async function getInverterDetails(\r\n\tadapter: any,\r\n\tinverterId: string\r\n): Promise<any> {\r\n\tconst map = {\r\n\t\tid: inverterId\r\n\t};\r\n\tconst body = JSON.stringify(map);\r\n\tconst ContentMd5 = getDigest(body);\r\n\tconst currentDate = getGMTTime();\r\n\tconst param =\r\n\t\t\"POST\" +\r\n\t\t\"\\n\" +\r\n\t\tContentMd5 +\r\n\t\t\"\\n\" +\r\n\t\t\"application/json\" +\r\n\t\t\"\\n\" +\r\n\t\tcurrentDate +\r\n\t\t\"\\n\" +\r\n\t\t\"/v1/api/inverterDetail\";\r\n\tconst sign = HmacSHA1Encrypt(param, adapter.config.apiSecret);\r\n\tconst url = API_BASE_URL + \"/v1/api/inverterDetail\";\r\n\tif (adapter.config.debugLogging) {\r\n\t\tadapter.log.debug(`Inverterdetails URL: ${url}`);\r\n\t}\r\n\ttry {\r\n\t\tconst requestBody = JSON.stringify(map);\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"post\",\r\n\t\t\turl: url,\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\tAuthorization: `API ${adapter.config.apiKey}:${sign}`,\r\n\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\tDate: currentDate,\r\n\t\t\t},\r\n\t\t\tdata: requestBody,\r\n\t\t\ttimeout: timeoutMs,\r\n\t\t});\r\n\t\tif (adapter.config.debugLogging) {\r\n\t\t\tadapter.log.debug(`API response (Inverterdetail) was:` + JSON.stringify(response.data.data));\r\n\t\t}\r\n\t\tif (response.data?.data) {\r\n\t\t\tconst record = response.data.data;\r\n\t\t\treturn {\r\n\t\t\t\tac_current_R: record.iAc1,\r\n\t\t\t\tac_current_S: record.iAc2,\r\n\t\t\t\tac_current_T: record.iAc3,\r\n\t\t\t\tac_voltage_R: record.uAc1,\r\n\t\t\t\tac_voltage_S: record.uAc2,\r\n\t\t\t\tac_voltage_T: record.uAc3,\r\n\t\t\t\tfamily_load_power_units: record.familyLoadPowerStr,\r\n\t\t\t\tfamily_load_power: record.familyLoadPower,\r\n\t\t\t\ttemperature: record.inverterTemperature,\r\n\t\t\t\tbattery_power: record.batteryPower,\r\n\t\t\t\tbattery_power_units: record.batterypowerStr,\r\n\t\t\t\tbattery_power_percentage: record.batteryPowerPec,\r\n\t\t\t\tbattery_today_charge_energy: record.batteryTodayChargeEnergy,\r\n\t\t\t\tbattery_today_charge_energy_units: record.batteryTodayChargeEnergyStr,\r\n\t\t\t\tbattery_total_charge_energy: record.batteryTotalChargeEnergy,\r\n\t\t\t\tbattery_total_charge_energy_units: record.batteryTotalChargeEnergyStr,\r\n\t\t\t\tbattery_today_discharge_energy: record.batteryTodayDischargeEnergy,\r\n\t\t\t\tbattery_today_discharge_energy_units: record.batteryTodayDischargeEnergyStr,\r\n\t\t\t\tbattery_total_discharge_energy: record.batteryTotalDischargeEnergy,\r\n\t\t\t\tbattery_total_discharge_energy_units: record.batteryTotalDischargeEnergyStr,\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tadapter.log.error(\"GetInverterDetails: could not parse result. Turn on debug logging for more info\");\r\n\t\t}\r\n\t} catch (e) {\r\n\t\tadapter.sentryInstance.getSentryObject().captureException(e);\r\n\t}\r\n}\r\n\r\nexport async function getEpmDetails(\r\n\tadapter: any\r\n): Promise<any> {\r\n\tconst map = {\r\n\t\tpageNo: 1,\r\n\t\tpageSize: 20,\r\n\t\tid: adapter.config.plantId\r\n\t};\r\n\tconst body = JSON.stringify(map);\r\n\tconst ContentMd5 = getDigest(body);\r\n\tconst currentDate = getGMTTime();\r\n\tconst param =\r\n\t\t\"POST\" +\r\n\t\t\"\\n\" +\r\n\t\tContentMd5 +\r\n\t\t\"\\n\" +\r\n\t\t\"application/json\" +\r\n\t\t\"\\n\" +\r\n\t\tcurrentDate +\r\n\t\t\"\\n\" +\r\n\t\t\"/v1/api/epmList\";\r\n\tconst sign = HmacSHA1Encrypt(param, adapter.config.apiSecret);\r\n\tconst url = API_BASE_URL + \"/v1/api/epmList\";\r\n\tif (adapter.config.debugLogging) {\r\n\t\tadapter.log.debug(`EPMlist URL: ${url}`);\r\n\t}\r\n\ttry {\r\n\t\tconst requestBody = JSON.stringify(map);\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"post\",\r\n\t\t\turl: url,\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\tAuthorization: `API ${adapter.config.apiKey}:${sign}`,\r\n\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\tDate: currentDate,\r\n\t\t\t},\r\n\t\t\tdata: requestBody,\r\n\t\t\ttimeout: timeoutMs,\r\n\t\t});\r\n\t\tif (adapter.config.debugLogging) {\r\n\t\t\tadapter.log.debug(`API response (EPM detail) was:` + JSON.stringify(response.data));\r\n\t\t}\r\n\t\treturn {\r\n\t\t};\r\n\t} catch (e) {\r\n\t\tadapter.sentryInstance.getSentryObject().captureException(e);\r\n\t}\r\n}\r\n\r\nexport function HmacSHA1Encrypt(\r\n\tencryptText: string,\r\n\tkeySecret: string,\r\n): string {\r\n\tconst keyBuffer = Buffer.from(keySecret, \"utf-8\");\r\n\tconst hmac = crypto.createHmac(\"sha1\", keyBuffer);\r\n\thmac.update(encryptText, \"utf-8\");\r\n\tconst resultBuffer = hmac.digest();\r\n\treturn resultBuffer.toString(\"base64\");\r\n}\r\n\r\nexport function getGMTTime(): string {\r\n\tconst cd = new Date();\r\n\tconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\tconst months = [\r\n\t\t\"Jan\",\r\n\t\t\"Feb\",\r\n\t\t\"Mar\",\r\n\t\t\"Apr\",\r\n\t\t\"May\",\r\n\t\t\"Jun\",\r\n\t\t\"Jul\",\r\n\t\t\"Aug\",\r\n\t\t\"Sep\",\r\n\t\t\"Oct\",\r\n\t\t\"Nov\",\r\n\t\t\"Dec\",\r\n\t];\r\n\treturn `${days[cd.getUTCDay()]}, ${cd.getUTCDate()} ${months[cd.getUTCMonth()]\r\n\t\t// eslint-disable-next-line @typescript-eslint/indent\r\n\t\t} ${cd.getUTCFullYear()} ${cd.getUTCHours()}:${cd.getUTCMinutes()}:${cd.getUTCSeconds()} GMT`;\r\n}\r\n\r\nexport function getDigest(test: string): string {\r\n\t// deepcode ignore InsecureHash: Solis API needs MD5 hash, no option to update at this time.\r\n\tconst md5 = crypto.createHash(\"md5\");\r\n\tmd5.update(test);\r\n\treturn md5.digest(\"base64\");\r\n}\r\n\r\nexport function createSentryInstance(adapter: any): any {\r\n\tif (adapter.supportsFeature && adapter.supportsFeature(\"PLUGINS\")) {\r\n\t\tconst sentryInstance = adapter.getPluginInstance(\"sentry\");\r\n\t\treturn sentryInstance;\r\n\t}\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,oBAAmB;AAEnB,MAAM,eAAe;AACrB,MAAM,YAAY;AAElB,eAAsB,kBACrB,SACe;AARhB;AASC,QAAM,MAAM;AAAA,IACX,IAAI,QAAQ,OAAO;AAAA,EACpB;AACA,QAAM,OAAO,KAAK,UAAU,GAAG;AAC/B,QAAM,aAAa,UAAU,IAAI;AACjC,QAAM,cAAc,WAAW;AAC/B,QAAM,QACL,WAEA,aACA,yBAGA,cACA;AAED,QAAM,OAAO,gBAAgB,OAAO,QAAQ,OAAO,SAAS;AAC5D,QAAM,MAAM,eAAe;AAC3B,MAAI,QAAQ,OAAO,cAAc;AAChC,YAAQ,IAAI,MAAM,uBAAuB,KAAK;AAAA,EAC/C;AACA,MAAI;AACH,UAAM,cAAc,KAAK,UAAU,GAAG;AACtC,UAAM,WAAW,UAAM,aAAAA,SAAM;AAAA,MAC5B,QAAQ;AAAA,MACR;AAAA,MACA,SAAS;AAAA,QACR,gBAAgB;AAAA,QAChB,eAAe,OAAO,QAAQ,OAAO,UAAU;AAAA,QAC/C,eAAe;AAAA,QACf,MAAM;AAAA,MACP;AAAA,MACA,MAAM;AAAA,MACN,SAAS;AAAA,IACV,CAAC;AACD,QAAI,QAAQ,OAAO,cAAc;AAChC,cAAQ,IAAI,MAAM,gCAAgC,KAAK,UAAU,SAAS,IAAI,CAAC;AAAA,IAChF;AACA,SAAI,cAAS,SAAT,mBAAe,MAAM;AACxB,YAAM,SAAS,SAAS,KAAK;AAC7B,aAAO;AAAA,QACN,eAAe,OAAO;AAAA,QACtB,qBAAqB,OAAO;AAAA,QAC5B,kBAAkB,OAAO;AAAA,QACzB,YAAY,OAAO;AAAA,QACnB,iBAAiB,OAAO;AAAA,QACxB,cAAc,OAAO;AAAA,QACrB,mBAAmB,OAAO;AAAA,QAC1B,iBAAiB,OAAO;AAAA,QACxB,uBAAuB,OAAO;AAAA,QAC9B,sBAAsB,OAAO;AAAA,QAC7B,yBAAyB,OAAO;AAAA,QAChC,0BAA0B,OAAO;AAAA,QACjC,yBAAyB,OAAO;AAAA,QAChC,aAAa,OAAO;AAAA,QACpB,6BAA6B,OAAO;AAAA,QACpC,mCAAmC,OAAO;AAAA,QAC1C,4BAA4B,OAAO;AAAA,QACnC,kCAAkC,OAAO;AAAA,QACzC,gCAAgC,OAAO;AAAA,QACvC,sCAAsC,OAAO;AAAA,QAC7C,+BAA+B,OAAO;AAAA,QACtC,qCAAqC,OAAO;AAAA,MAC7C;AAAA,IACD,OAAO;AACN,cAAQ,IAAI,MAAM,gFAAgF;AAAA,IACnG;AAAA,EACD,SAAS,OAAP;AACD,YAAQ,eAAe,gBAAgB,EAAE,iBAAiB,KAAK;AAAA,EAChE;AACD;AAEA,eAAsB,gBACrB,SACe;AAnFhB;AAoFC,QAAM,MAAM;AAAA,IACX,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,WAAW,QAAQ,OAAO;AAAA,EAC3B;AACA,QAAM,OAAO,KAAK,UAAU,GAAG;AAC/B,QAAM,aAAa,UAAU,IAAI;AACjC,QAAM,cAAc,WAAW;AAC/B,QAAM,QACL,WAEA,aACA,yBAGA,cACA;AAED,QAAM,OAAO,gBAAgB,OAAO,QAAQ,OAAO,SAAS;AAC5D,QAAM,MAAM,eAAe;AAC3B,MAAI,QAAQ,OAAO,cAAc;AAChC,YAAQ,IAAI,MAAM,qBAAqB,KAAK;AAAA,EAC7C;AACA,MAAI;AACH,UAAM,cAAc;AACpB,UAAM,WAAW,UAAM,aAAAA,SAAM;AAAA,MAC5B,QAAQ;AAAA,MACR;AAAA,MACA,SAAS;AAAA,QACR,gBAAgB;AAAA,QAChB,eAAe,OAAO,QAAQ,OAAO,UAAU;AAAA,QAC/C,eAAe;AAAA,QACf,MAAM;AAAA,MACP;AAAA,MACA,MAAM;AAAA,MACN,SAAS;AAAA,IACV,CAAC;AACD,QAAI,QAAQ,OAAO,cAAc;AAChC,cAAQ,IAAI,MAAM,qCAAqC,KAAK,UAAU,SAAS,KAAK,KAAK,KAAK,QAAQ,EAAE,CAAC;AAAA,IAC1G;AACA,SAAI,0BAAS,SAAT,mBAAe,SAAf,mBAAqB,SAArB,mBAA2B,QAAQ,IAAI;AAC1C,YAAM,SAAS,SAAS,KAAK,KAAK,KAAK,QAAQ;AAC/C,aAAO;AAAA,QACN,gBAAgB,OAAO;AAAA,QACvB,QAAQ,OAAO;AAAA,QACf,aAAa,OAAO;AAAA,QACpB,wBAAwB,OAAO;AAAA,MAChC;AAAA,IACD,OAAO;AACN,cAAQ,IAAI,MAAM,iFAAiF;AAAA,IACpG;AAAA,EACD,SAAS,GAAP;AACD,YAAQ,eAAe,gBAAgB,EAAE,iBAAiB,CAAC;AAAA,EAC5D;AACD;AAEA,eAAsB,mBACrB,SACA,YACe;AA/IhB;AAgJC,QAAM,MAAM;AAAA,IACX,IAAI;AAAA,EACL;AACA,QAAM,OAAO,KAAK,UAAU,GAAG;AAC/B,QAAM,aAAa,UAAU,IAAI;AACjC,QAAM,cAAc,WAAW;AAC/B,QAAM,QACL,WAEA,aACA,yBAGA,cACA;AAED,QAAM,OAAO,gBAAgB,OAAO,QAAQ,OAAO,SAAS;AAC5D,QAAM,MAAM,eAAe;AAC3B,MAAI,QAAQ,OAAO,cAAc;AAChC,YAAQ,IAAI,MAAM,wBAAwB,KAAK;AAAA,EAChD;AACA,MAAI;AACH,UAAM,cAAc,KAAK,UAAU,GAAG;AACtC,UAAM,WAAW,UAAM,aAAAA,SAAM;AAAA,MAC5B,QAAQ;AAAA,MACR;AAAA,MACA,SAAS;AAAA,QACR,gBAAgB;AAAA,QAChB,eAAe,OAAO,QAAQ,OAAO,UAAU;AAAA,QAC/C,eAAe;AAAA,QACf,MAAM;AAAA,MACP;AAAA,MACA,MAAM;AAAA,MACN,SAAS;AAAA,IACV,CAAC;AACD,QAAI,QAAQ,OAAO,cAAc;AAChC,cAAQ,IAAI,MAAM,uCAAuC,KAAK,UAAU,SAAS,KAAK,IAAI,CAAC;AAAA,IAC5F;AACA,SAAI,cAAS,SAAT,mBAAe,MAAM;AACxB,YAAM,SAAS,SAAS,KAAK;AAC7B,aAAO;AAAA,QACN,cAAc,OAAO;AAAA,QACrB,cAAc,OAAO;AAAA,QACrB,cAAc,OAAO;AAAA,QACrB,cAAc,OAAO;AAAA,QACrB,cAAc,OAAO;AAAA,QACrB,cAAc,OAAO;AAAA,QACrB,yBAAyB,OAAO;AAAA,QAChC,mBAAmB,OAAO;AAAA,QAC1B,aAAa,OAAO;AAAA,QACpB,eAAe,OAAO;AAAA,QACtB,qBAAqB,OAAO;AAAA,QAC5B,0BAA0B,OAAO;AAAA,QACjC,6BAA6B,OAAO;AAAA,QACpC,mCAAmC,OAAO;AAAA,QAC1C,6BAA6B,OAAO;AAAA,QACpC,mCAAmC,OAAO;AAAA,QAC1C,gCAAgC,OAAO;AAAA,QACvC,sCAAsC,OAAO;AAAA,QAC7C,gCAAgC,OAAO;AAAA,QACvC,sCAAsC,OAAO;AAAA,MAC9C;AAAA,IACD,OAAO;AACN,cAAQ,IAAI,MAAM,iFAAiF;AAAA,IACpG;AAAA,EACD,SAAS,GAAP;AACD,YAAQ,eAAe,gBAAgB,EAAE,iBAAiB,CAAC;AAAA,EAC5D;AACD;AAEA,eAAsB,cACrB,SACe;AACf,QAAM,MAAM;AAAA,IACX,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,IAAI,QAAQ,OAAO;AAAA,EACpB;AACA,QAAM,OAAO,KAAK,UAAU,GAAG;AAC/B,QAAM,aAAa,UAAU,IAAI;AACjC,QAAM,cAAc,WAAW;AAC/B,QAAM,QACL,WAEA,aACA,yBAGA,cACA;AAED,QAAM,OAAO,gBAAgB,OAAO,QAAQ,OAAO,SAAS;AAC5D,QAAM,MAAM,eAAe;AAC3B,MAAI,QAAQ,OAAO,cAAc;AAChC,YAAQ,IAAI,MAAM,gBAAgB,KAAK;AAAA,EACxC;AACA,MAAI;AACH,UAAM,cAAc,KAAK,UAAU,GAAG;AACtC,UAAM,WAAW,UAAM,aAAAA,SAAM;AAAA,MAC5B,QAAQ;AAAA,MACR;AAAA,MACA,SAAS;AAAA,QACR,gBAAgB;AAAA,QAChB,eAAe,OAAO,QAAQ,OAAO,UAAU;AAAA,QAC/C,eAAe;AAAA,QACf,MAAM;AAAA,MACP;AAAA,MACA,MAAM;AAAA,MACN,SAAS;AAAA,IACV,CAAC;AACD,QAAI,QAAQ,OAAO,cAAc;AAChC,cAAQ,IAAI,MAAM,mCAAmC,KAAK,UAAU,SAAS,IAAI,CAAC;AAAA,IACnF;AACA,WAAO,CACP;AAAA,EACD,SAAS,GAAP;AACD,YAAQ,eAAe,gBAAgB,EAAE,iBAAiB,CAAC;AAAA,EAC5D;AACD;AAEO,SAAS,gBACf,aACA,WACS;AACT,QAAM,YAAY,OAAO,KAAK,WAAW,OAAO;AAChD,QAAM,OAAO,cAAAC,QAAO,WAAW,QAAQ,SAAS;AAChD,OAAK,OAAO,aAAa,OAAO;AAChC,QAAM,eAAe,KAAK,OAAO;AACjC,SAAO,aAAa,SAAS,QAAQ;AACtC;AAEO,SAAS,aAAqB;AACpC,QAAM,KAAK,IAAI,KAAK;AACpB,QAAM,OAAO,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AAC7D,QAAM,SAAS;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,SAAO,GAAG,KAAK,GAAG,UAAU,OAAO,GAAG,WAAW,KAAK,OAAO,GAAG,YAAY,MAEvE,GAAG,eAAe,KAAK,GAAG,YAAY,KAAK,GAAG,cAAc,KAAK,GAAG,cAAc;AACxF;AAEO,SAAS,UAAU,MAAsB;AAE/C,QAAM,MAAM,cAAAA,QAAO,WAAW,KAAK;AACnC,MAAI,OAAO,IAAI;AACf,SAAO,IAAI,OAAO,QAAQ;AAC3B;AAEO,SAAS,qBAAqB,SAAmB;AACvD,MAAI,QAAQ,mBAAmB,QAAQ,gBAAgB,SAAS,GAAG;AAClE,UAAM,iBAAiB,QAAQ,kBAAkB,QAAQ;AACzD,WAAO;AAAA,EACR;AACD;",
  "names": ["axios", "crypto"]
}

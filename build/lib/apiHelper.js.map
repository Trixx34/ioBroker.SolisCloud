{
  "version": 3,
  "sources": ["../../src/lib/apiHelper.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport axios from \"axios\";\r\nimport crypto from \"crypto\";\r\nimport { stat } from \"fs\";\r\nconst API_BASE_URL = \"https://www.soliscloud.com:13333\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\nexport async function getStationDetails(\r\n  this: any,\r\n  stationId: string,\r\n  apiKey: string,\r\n  apiSecret: string,\r\n) {\r\n  const map = {\r\n    id: stationId,\r\n  };\r\n  const body = JSON.stringify(map);\r\n  const ContentMd5 = getDigest(body);\r\n  const currentDate = getGMTTime();\r\n  const param =\r\n    \"POST\" +\r\n    \"\\n\" +\r\n    ContentMd5 +\r\n    \"\\n\" +\r\n    \"application/json\" +\r\n    \"\\n\" +\r\n    currentDate +\r\n    \"\\n\" +\r\n    \"/v1/api/stationDetail\";\r\n  const sign = HmacSHA1Encrypt(param, apiSecret);\r\n  //#todo fix logging in apihelper\r\n  //logger.info(`Encrypted SHA1 (this can NOT be retraced to your API secret): ${sign}`);\r\n  const url = API_BASE_URL + \"/v1/api/stationDetail\";\r\n  try {\r\n    const requestBody = JSON.stringify(map);\r\n    //this.log.debug(`Request body: ${JSON.stringify(map)}`);\r\n    const response = await axios({\r\n      method: \"post\",\r\n      url: url,\r\n      headers: {\r\n        \"Content-type\": \"application/json;charset=UTF-8\",\r\n        Authorization: `API ${apiKey}:${sign}`,\r\n        \"Content-MD5\": ContentMd5,\r\n        Date: currentDate,\r\n      },\r\n      data: requestBody,\r\n      timeout: 5000,\r\n    });\r\n    //this.log.debug(`API response was: ${response.data}`);\r\n    return {\r\n      current_power: response.data.data.power,\r\n      current_consumption: response.data.data.familyLoadPower,\r\n      current_from_net: response.data.data.psum,\r\n      sold_today: response.data.data.gridSellDayEnergy,\r\n      generated_today: response.data.data.dayEnergy,\r\n      bought_today: response.data.data.gridPurchasedDayEnergy,\r\n      consumption_today: response.data.data.homeLoadEnergy,\r\n      battery_percent: response.data.data.batteryPercent,\r\n      battery_current_usage: response.data.data.batteryPower,\r\n      battery_today_charge: response.data.data.batteryChargeEnergy,\r\n      battery_today_discharge: response.data.data.batteryDischargeEnergy,\r\n      total_consumption_energy: response.data.data.homeLoadEnergy,\r\n      self_consumption_energy: response.data.data.oneSelf,\r\n      plant_state: response.data.data.state,\r\n    };\r\n  } catch (error) {\r\n    this.log.error(error);\r\n  }\r\n}\r\n\r\nexport async function getInverterDetails(\r\n  this: any,\r\n  stationId: string,\r\n  apiKey: string,\r\n  apiSecret: string\r\n): Promise<any> {\r\n  const map = {\r\n    pageNo: 1,\r\n    pageSize: 20,\r\n    stationId: stationId\r\n  };\r\n  const body = JSON.stringify(map);\r\n  const ContentMd5 = getDigest(body);\r\n  const currentDate = getGMTTime();\r\n  const param =\r\n    \"POST\" +\r\n    \"\\n\" +\r\n    ContentMd5 +\r\n    \"\\n\" +\r\n    \"application/json\" +\r\n    \"\\n\" +\r\n    currentDate +\r\n    \"\\n\" +\r\n    \"/v1/api/inverterList\";\r\n  const sign = HmacSHA1Encrypt(param, apiSecret);\r\n  const url = API_BASE_URL + \"/v1/api/inverterList\";\r\n  try {\r\n    const requestBody = JSON.stringify(map);\r\n    const response = await axios({\r\n      method: \"post\",\r\n      url: url,\r\n      headers: {\r\n        \"Content-type\": \"application/json;charset=UTF-8\",\r\n        Authorization: `API ${apiKey}:${sign}`,\r\n        \"Content-MD5\": ContentMd5,\r\n        Date: currentDate,\r\n      },\r\n      data: requestBody,\r\n      timeout: 5000,\r\n    });\r\n    return response.data\r\n  } catch (e) {\r\n    //#TODO fix console logging\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nexport function HmacSHA1Encrypt(\r\n  encryptText: string,\r\n  keySecret: string,\r\n): string {\r\n  const keyBuffer = Buffer.from(keySecret, \"utf-8\");\r\n  const hmac = crypto.createHmac(\"sha1\", keyBuffer);\r\n  hmac.update(encryptText, \"utf-8\");\r\n  const resultBuffer = hmac.digest();\r\n  return resultBuffer.toString(\"base64\");\r\n}\r\n\r\nexport function getGMTTime(): string {\r\n  const cd = new Date();\r\n  const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n  return `${days[cd.getUTCDay()]}, ${cd.getUTCDate()} ${months[cd.getUTCMonth()]\r\n    } ${cd.getUTCFullYear()} ${cd.getUTCHours()}:${cd.getUTCMinutes()}:${cd.getUTCSeconds()} GMT`;\r\n}\r\n\r\nexport function getDigest(test: string): string {\r\n  const md5 = crypto.createHash(\"md5\");\r\n  md5.update(test);\r\n  return md5.digest(\"base64\");\r\n}\r\n"],
  "mappings": "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",
  "names": ["axios", "crypto"]
}

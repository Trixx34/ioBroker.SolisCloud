{
  "version": 3,
  "sources": ["../../src/lib/apiHelper.ts"],
  "sourcesContent": ["import axios from \"axios\";\r\nimport crypto from \"crypto\";\r\nconst API_BASE_URL = \"https://www.soliscloud.com:13333\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\r\nexport async function getStationDetails(stationId: string, apiKey: string, apiSecret: string) {\r\n\tconst map = {\r\n\t\tid: stationId,\r\n\t};\r\n\tconst body = JSON.stringify(map);\r\n\tconst ContentMd5 = getDigest(body);\r\n\tconst currentDate = getGMTTime();\r\n\tconst param =\r\n        \"POST\" +\r\n        \"\\n\" +\r\n        ContentMd5 +\r\n        \"\\n\" +\r\n        \"application/json\" +\r\n        \"\\n\" +\r\n        currentDate +\r\n        \"\\n\" +\r\n        \"/v1/api/stationDetail\";\r\n\tconst sign = HmacSHA1Encrypt(param, apiSecret);\r\n\tconst url = API_BASE_URL + \"/v1/api/stationDetail\";\r\n\ttry {\r\n\t\tconst requestBody = JSON.stringify(map);\r\n\t\tconst response = await axios({\r\n\t\t\tmethod: \"post\",\r\n\t\t\turl: url,\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json;charset=UTF-8\",\r\n\t\t\t\tAuthorization: `API ${apiKey}:${sign}`,\r\n\t\t\t\t\"Content-MD5\": ContentMd5,\r\n\t\t\t\tDate: currentDate,\r\n\t\t\t},\r\n\t\t\tdata: requestBody,\r\n\t\t});\r\n\t\t//console.log(response.data.data);\r\n\t\treturn {\r\n\t\t\tcurrent_Power: response.data.data.power,\r\n\t\t\tcurrent_consumption: response.data.data.familyLoadPower,\r\n\t\t\tcurrent_From_Net: response.data.data.psum,\r\n\t\t\tsold_Today: response.data.data.gridSellDayEnergy,\r\n\t\t\tgenerated_Today: response.data.data.dayEnergy,\r\n\t\t\tbought_Today: response.data.data.gridPurchasedDayEnergy,\r\n\t\t\tconsumption_Today: response.data.data.homeLoadEnergy,\r\n\t\t\tbattery_percent: response.data.data.batteryPercent,\r\n\t\t\tbattery_current_usage: response.data.data.batteryPower,\r\n\t\t};\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n}\r\n\r\nexport function HmacSHA1Encrypt(encryptText: string, keySecret: string):string {\r\n\tconst keyBuffer = Buffer.from(keySecret, \"utf-8\");\r\n\tconst hmac = crypto.createHmac(\"sha1\", keyBuffer);\r\n\thmac.update(encryptText, \"utf-8\");\r\n\tconst resultBuffer = hmac.digest();\r\n\treturn resultBuffer.toString(\"base64\");\r\n}\r\n\r\nexport function getGMTTime():string {\r\n\tconst cd = new Date();\r\n\tconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\tconst months = [\r\n\t\t\"Jan\",\r\n\t\t\"Feb\",\r\n\t\t\"Mar\",\r\n\t\t\"Apr\",\r\n\t\t\"May\",\r\n\t\t\"Jun\",\r\n\t\t\"Jul\",\r\n\t\t\"Aug\",\r\n\t\t\"Sep\",\r\n\t\t\"Oct\",\r\n\t\t\"Nov\",\r\n\t\t\"Dec\",\r\n\t];\r\n\r\n\treturn `${days[cd.getUTCDay()]}, ${cd.getUTCDate()} ${months[cd.getUTCMonth()]} ${cd.getUTCFullYear()} ${cd.getUTCHours()}:${cd.getUTCMinutes()}:${cd.getUTCSeconds()} GMT`;\r\n}\r\n\r\nexport function getDigest(test:string):string {\r\n\tconst md5 = crypto.createHash(\"md5\");\r\n\tmd5.update(test);\r\n\treturn md5.digest(\"base64\");\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,oBAAmB;AACnB,MAAM,eAAe;AAGrB,eAAsB,kBAAkB,WAAmB,QAAgB,WAAmB;AAC7F,QAAM,MAAM;AAAA,IACX,IAAI;AAAA,EACL;AACA,QAAM,OAAO,KAAK,UAAU,GAAG;AAC/B,QAAM,aAAa,UAAU,IAAI;AACjC,QAAM,cAAc,WAAW;AAC/B,QAAM,QACC,WAEA,aACA,yBAGA,cACA;AAEP,QAAM,OAAO,gBAAgB,OAAO,SAAS;AAC7C,QAAM,MAAM,eAAe;AAC3B,MAAI;AACH,UAAM,cAAc,KAAK,UAAU,GAAG;AACtC,UAAM,WAAW,UAAM,aAAAA,SAAM;AAAA,MAC5B,QAAQ;AAAA,MACR;AAAA,MACA,SAAS;AAAA,QACR,gBAAgB;AAAA,QAChB,eAAe,OAAO,UAAU;AAAA,QAChC,eAAe;AAAA,QACf,MAAM;AAAA,MACP;AAAA,MACA,MAAM;AAAA,IACP,CAAC;AAED,WAAO;AAAA,MACN,eAAe,SAAS,KAAK,KAAK;AAAA,MAClC,qBAAqB,SAAS,KAAK,KAAK;AAAA,MACxC,kBAAkB,SAAS,KAAK,KAAK;AAAA,MACrC,YAAY,SAAS,KAAK,KAAK;AAAA,MAC/B,iBAAiB,SAAS,KAAK,KAAK;AAAA,MACpC,cAAc,SAAS,KAAK,KAAK;AAAA,MACjC,mBAAmB,SAAS,KAAK,KAAK;AAAA,MACtC,iBAAiB,SAAS,KAAK,KAAK;AAAA,MACpC,uBAAuB,SAAS,KAAK,KAAK;AAAA,IAC3C;AAAA,EACD,SAAS,OAAP;AACD,YAAQ,MAAM,KAAK;AAAA,EACpB;AACD;AAEO,SAAS,gBAAgB,aAAqB,WAA0B;AAC9E,QAAM,YAAY,OAAO,KAAK,WAAW,OAAO;AAChD,QAAM,OAAO,cAAAC,QAAO,WAAW,QAAQ,SAAS;AAChD,OAAK,OAAO,aAAa,OAAO;AAChC,QAAM,eAAe,KAAK,OAAO;AACjC,SAAO,aAAa,SAAS,QAAQ;AACtC;AAEO,SAAS,aAAoB;AACnC,QAAM,KAAK,IAAI,KAAK;AACpB,QAAM,OAAO,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AAC7D,QAAM,SAAS;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AAEA,SAAO,GAAG,KAAK,GAAG,UAAU,OAAO,GAAG,WAAW,KAAK,OAAO,GAAG,YAAY,MAAM,GAAG,eAAe,KAAK,GAAG,YAAY,KAAK,GAAG,cAAc,KAAK,GAAG,cAAc;AACrK;AAEO,SAAS,UAAU,MAAoB;AAC7C,QAAM,MAAM,cAAAA,QAAO,WAAW,KAAK;AACnC,MAAI,OAAO,IAAI;AACf,SAAO,IAAI,OAAO,QAAQ;AAC3B;",
  "names": ["axios", "crypto"]
}
